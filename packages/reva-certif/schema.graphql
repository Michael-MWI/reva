# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type rome {
  id: ID!
  code: String
  label: String
  slug: String
  url: String
  is_active: Boolean
  certifications(where: certificationWhereInput! = {}, orderBy: [certificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: certificationWhereUniqueInput): [certification!]
  certificationsCount(where: certificationWhereInput! = {}): Int
}

input romeWhereUniqueInput {
  id: ID
}

input romeWhereInput {
  AND: [romeWhereInput!]
  OR: [romeWhereInput!]
  NOT: [romeWhereInput!]
  id: IDFilter
  code: StringFilter
  label: StringFilter
  slug: StringFilter
  url: StringFilter
  is_active: BooleanFilter
  certifications: certificationManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input certificationManyRelationFilter {
  every: certificationWhereInput
  some: certificationWhereInput
  none: certificationWhereInput
}

input romeOrderByInput {
  id: OrderDirection
  code: OrderDirection
  label: OrderDirection
  slug: OrderDirection
  url: OrderDirection
  is_active: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input romeUpdateInput {
  code: String
  label: String
  slug: String
  url: String
  is_active: Boolean
  certifications: certificationRelateToManyForUpdateInput
}

input certificationRelateToManyForUpdateInput {
  disconnect: [certificationWhereUniqueInput!]
  set: [certificationWhereUniqueInput!]
  create: [certificationCreateInput!]
  connect: [certificationWhereUniqueInput!]
}

input romeUpdateArgs {
  where: romeWhereUniqueInput!
  data: romeUpdateInput!
}

input romeCreateInput {
  code: String
  label: String
  slug: String
  url: String
  is_active: Boolean
  certifications: certificationRelateToManyForCreateInput
}

input certificationRelateToManyForCreateInput {
  create: [certificationCreateInput!]
  connect: [certificationWhereUniqueInput!]
}

type certification {
  id: ID!
  label: String
  acronym: String
  level: Int
  activities: String
  activity_area: String
  accessible_job_type: String
  abilities: String
  slug: String
  summary: String
  rncp_id: String
  romes(where: romeWhereInput! = {}, orderBy: [romeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: romeWhereUniqueInput): [rome!]
  romesCount(where: romeWhereInput! = {}): Int
}

input certificationWhereUniqueInput {
  id: ID
}

input certificationWhereInput {
  AND: [certificationWhereInput!]
  OR: [certificationWhereInput!]
  NOT: [certificationWhereInput!]
  id: IDFilter
  label: StringFilter
  acronym: StringFilter
  level: IntFilter
  activities: StringFilter
  activity_area: StringFilter
  accessible_job_type: StringFilter
  abilities: StringFilter
  slug: StringFilter
  summary: StringFilter
  rncp_id: StringFilter
  romes: romeManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input romeManyRelationFilter {
  every: romeWhereInput
  some: romeWhereInput
  none: romeWhereInput
}

input certificationOrderByInput {
  id: OrderDirection
  label: OrderDirection
  acronym: OrderDirection
  level: OrderDirection
  activities: OrderDirection
  activity_area: OrderDirection
  accessible_job_type: OrderDirection
  abilities: OrderDirection
  slug: OrderDirection
  summary: OrderDirection
  rncp_id: OrderDirection
}

input certificationUpdateInput {
  label: String
  acronym: String
  level: Int
  activities: String
  activity_area: String
  accessible_job_type: String
  abilities: String
  slug: String
  summary: String
  rncp_id: String
  romes: romeRelateToManyForUpdateInput
}

input romeRelateToManyForUpdateInput {
  disconnect: [romeWhereUniqueInput!]
  set: [romeWhereUniqueInput!]
  create: [romeCreateInput!]
  connect: [romeWhereUniqueInput!]
}

input certificationUpdateArgs {
  where: certificationWhereUniqueInput!
  data: certificationUpdateInput!
}

input certificationCreateInput {
  label: String
  acronym: String
  level: Int
  activities: String
  activity_area: String
  accessible_job_type: String
  abilities: String
  slug: String
  summary: String
  rncp_id: String
  romes: romeRelateToManyForCreateInput
}

input romeRelateToManyForCreateInput {
  create: [romeCreateInput!]
  connect: [romeWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createrome(data: romeCreateInput!): rome
  createRomes(data: [romeCreateInput!]!): [rome]
  updaterome(where: romeWhereUniqueInput!, data: romeUpdateInput!): rome
  updateRomes(data: [romeUpdateArgs!]!): [rome]
  deleterome(where: romeWhereUniqueInput!): rome
  deleteRomes(where: [romeWhereUniqueInput!]!): [rome]
  createcertification(data: certificationCreateInput!): certification
  createCertifications(data: [certificationCreateInput!]!): [certification]
  updatecertification(where: certificationWhereUniqueInput!, data: certificationUpdateInput!): certification
  updateCertifications(data: [certificationUpdateArgs!]!): [certification]
  deletecertification(where: certificationWhereUniqueInput!): certification
  deleteCertifications(where: [certificationWhereUniqueInput!]!): [certification]
}

type Query {
  romes(where: romeWhereInput! = {}, orderBy: [romeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: romeWhereUniqueInput): [rome!]
  rome(where: romeWhereUniqueInput!): rome
  romesCount(where: romeWhereInput! = {}): Int
  certifications(where: certificationWhereInput! = {}, orderBy: [certificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: certificationWhereUniqueInput): [certification!]
  certification(where: certificationWhereUniqueInput!): certification
  certificationsCount(where: certificationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
