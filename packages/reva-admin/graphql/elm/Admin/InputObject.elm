-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.InputObject exposing (..)

import Admin.Enum.AccountGroup
import Admin.Enum.AdmissibilityStatus
import Admin.Enum.CertificationCompletion
import Admin.Enum.ConformiteNormeAccessibilite
import Admin.Enum.DistanceStatus
import Admin.Enum.Duration
import Admin.Enum.ExamResult
import Admin.Enum.Gender
import Admin.Enum.JuryResult
import Admin.Enum.LegalStatus
import Admin.Enum.Sort
import Admin.Enum.SubscriptionOrganismTypology
import Admin.Interface
import Admin.Object
import Admin.Scalar
import Admin.Union
import Data.Scalar
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAccountInput :
    AccountInputRequiredFields
    -> (AccountInputOptionalFields -> AccountInputOptionalFields)
    -> AccountInput
buildAccountInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { firstname = Absent, lastname = Absent, organismId = Absent }
    in
    { email = required____.email, username = required____.username, firstname = optionals____.firstname, lastname = optionals____.lastname, group = required____.group, organismId = optionals____.organismId }


type alias AccountInputRequiredFields =
    { email : String
    , username : String
    , group : Admin.Enum.AccountGroup.AccountGroup
    }


type alias AccountInputOptionalFields =
    { firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , organismId : OptionalArgument Data.Scalar.Uuid
    }


{-| Type for the AccountInput input object.
-}
type alias AccountInput =
    { email : String
    , username : String
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , group : Admin.Enum.AccountGroup.AccountGroup
    , organismId : OptionalArgument Data.Scalar.Uuid
    }


{-| Encode a AccountInput into a value that can be used as an argument.
-}
encodeAccountInput : AccountInput -> Value
encodeAccountInput input____ =
    Encode.maybeObject
        [ ( "email", Encode.string input____.email |> Just ), ( "username", Encode.string input____.username |> Just ), ( "firstname", Encode.string |> Encode.optional input____.firstname ), ( "lastname", Encode.string |> Encode.optional input____.lastname ), ( "group", Encode.enum Admin.Enum.AccountGroup.toString input____.group |> Just ), ( "organismId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.organismId ) ]


buildAdmissibilityInput :
    AdmissibilityInputRequiredFields
    -> (AdmissibilityInputOptionalFields -> AdmissibilityInputOptionalFields)
    -> AdmissibilityInput
buildAdmissibilityInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { reportSentAt = Absent, certifierRespondedAt = Absent, responseAvailableToCandidateAt = Absent, status = Absent }
    in
    { isCandidateAlreadyAdmissible = required____.isCandidateAlreadyAdmissible, reportSentAt = optionals____.reportSentAt, certifierRespondedAt = optionals____.certifierRespondedAt, responseAvailableToCandidateAt = optionals____.responseAvailableToCandidateAt, status = optionals____.status }


type alias AdmissibilityInputRequiredFields =
    { isCandidateAlreadyAdmissible : Bool }


type alias AdmissibilityInputOptionalFields =
    { reportSentAt : OptionalArgument Data.Scalar.Timestamp
    , certifierRespondedAt : OptionalArgument Data.Scalar.Timestamp
    , responseAvailableToCandidateAt : OptionalArgument Data.Scalar.Timestamp
    , status : OptionalArgument Admin.Enum.AdmissibilityStatus.AdmissibilityStatus
    }


{-| Type for the AdmissibilityInput input object.
-}
type alias AdmissibilityInput =
    { isCandidateAlreadyAdmissible : Bool
    , reportSentAt : OptionalArgument Data.Scalar.Timestamp
    , certifierRespondedAt : OptionalArgument Data.Scalar.Timestamp
    , responseAvailableToCandidateAt : OptionalArgument Data.Scalar.Timestamp
    , status : OptionalArgument Admin.Enum.AdmissibilityStatus.AdmissibilityStatus
    }


{-| Encode a AdmissibilityInput into a value that can be used as an argument.
-}
encodeAdmissibilityInput : AdmissibilityInput -> Value
encodeAdmissibilityInput input____ =
    Encode.maybeObject
        [ ( "isCandidateAlreadyAdmissible", Encode.bool input____.isCandidateAlreadyAdmissible |> Just ), ( "reportSentAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) |> Encode.optional input____.reportSentAt ), ( "certifierRespondedAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) |> Encode.optional input____.certifierRespondedAt ), ( "responseAvailableToCandidateAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) |> Encode.optional input____.responseAvailableToCandidateAt ), ( "status", Encode.enum Admin.Enum.AdmissibilityStatus.toString |> Encode.optional input____.status ) ]


buildAdmissibilityInputFvae :
    AdmissibilityInputFvaeRequiredFields
    -> (AdmissibilityInputFvaeOptionalFields -> AdmissibilityInputFvaeOptionalFields)
    -> AdmissibilityInputFvae
buildAdmissibilityInputFvae required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { expiresAt = Absent }
    in
    { isAlreadyAdmissible = required____.isAlreadyAdmissible, expiresAt = optionals____.expiresAt }


type alias AdmissibilityInputFvaeRequiredFields =
    { isAlreadyAdmissible : Bool }


type alias AdmissibilityInputFvaeOptionalFields =
    { expiresAt : OptionalArgument Data.Scalar.Timestamp }


{-| Type for the AdmissibilityInputFvae input object.
-}
type alias AdmissibilityInputFvae =
    { isAlreadyAdmissible : Bool
    , expiresAt : OptionalArgument Data.Scalar.Timestamp
    }


{-| Encode a AdmissibilityInputFvae into a value that can be used as an argument.
-}
encodeAdmissibilityInputFvae : AdmissibilityInputFvae -> Value
encodeAdmissibilityInputFvae input____ =
    Encode.maybeObject
        [ ( "isAlreadyAdmissible", Encode.bool input____.isAlreadyAdmissible |> Just ), ( "expiresAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) |> Encode.optional input____.expiresAt ) ]


buildAppointmentInformationsInput :
    (AppointmentInformationsInputOptionalFields -> AppointmentInformationsInputOptionalFields)
    -> AppointmentInformationsInput
buildAppointmentInformationsInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { firstAppointmentOccuredAt = Absent }
    in
    { firstAppointmentOccuredAt = optionals____.firstAppointmentOccuredAt }


type alias AppointmentInformationsInputOptionalFields =
    { firstAppointmentOccuredAt : OptionalArgument Data.Scalar.Timestamp }


{-| Type for the AppointmentInformationsInput input object.
-}
type alias AppointmentInformationsInput =
    { firstAppointmentOccuredAt : OptionalArgument Data.Scalar.Timestamp }


{-| Encode a AppointmentInformationsInput into a value that can be used as an argument.
-}
encodeAppointmentInformationsInput : AppointmentInformationsInput -> Value
encodeAppointmentInformationsInput input____ =
    Encode.maybeObject
        [ ( "firstAppointmentOccuredAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) |> Encode.optional input____.firstAppointmentOccuredAt ) ]


buildCandidacyInput :
    CandidacyInputRequiredFields
    -> CandidacyInput
buildCandidacyInput required____ =
    { deviceId = required____.deviceId, certificationId = required____.certificationId, regionId = required____.regionId }


type alias CandidacyInputRequiredFields =
    { deviceId : Data.Scalar.Id
    , certificationId : Data.Scalar.Id
    , regionId : Data.Scalar.Id
    }


{-| Type for the CandidacyInput input object.
-}
type alias CandidacyInput =
    { deviceId : Data.Scalar.Id
    , certificationId : Data.Scalar.Id
    , regionId : Data.Scalar.Id
    }


{-| Encode a CandidacyInput into a value that can be used as an argument.
-}
encodeCandidacyInput : CandidacyInput -> Value
encodeCandidacyInput input____ =
    Encode.maybeObject
        [ ( "deviceId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.deviceId |> Just ), ( "certificationId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.certificationId |> Just ), ( "regionId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.regionId |> Just ) ]


buildCandidateGoalInput :
    CandidateGoalInputRequiredFields
    -> (CandidateGoalInputOptionalFields -> CandidateGoalInputOptionalFields)
    -> CandidateGoalInput
buildCandidateGoalInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { additionalInformation = Absent }
    in
    { goalId = required____.goalId, additionalInformation = optionals____.additionalInformation }


type alias CandidateGoalInputRequiredFields =
    { goalId : Data.Scalar.Id }


type alias CandidateGoalInputOptionalFields =
    { additionalInformation : OptionalArgument String }


{-| Type for the CandidateGoalInput input object.
-}
type alias CandidateGoalInput =
    { goalId : Data.Scalar.Id
    , additionalInformation : OptionalArgument String
    }


{-| Encode a CandidateGoalInput into a value that can be used as an argument.
-}
encodeCandidateGoalInput : CandidateGoalInput -> Value
encodeCandidateGoalInput input____ =
    Encode.maybeObject
        [ ( "goalId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.goalId |> Just ), ( "additionalInformation", Encode.string |> Encode.optional input____.additionalInformation ) ]


buildCandidateInput :
    CandidateInputRequiredFields
    -> (CandidateInputOptionalFields -> CandidateInputOptionalFields)
    -> CandidateInput
buildCandidateInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { certificationId = Absent }
    in
    { email = required____.email, phone = required____.phone, firstname = required____.firstname, lastname = required____.lastname, departmentId = required____.departmentId, certificationId = optionals____.certificationId }


type alias CandidateInputRequiredFields =
    { email : String
    , phone : String
    , firstname : String
    , lastname : String
    , departmentId : String
    }


type alias CandidateInputOptionalFields =
    { certificationId : OptionalArgument String }


{-| Type for the CandidateInput input object.
-}
type alias CandidateInput =
    { email : String
    , phone : String
    , firstname : String
    , lastname : String
    , departmentId : String
    , certificationId : OptionalArgument String
    }


{-| Encode a CandidateInput into a value that can be used as an argument.
-}
encodeCandidateInput : CandidateInput -> Value
encodeCandidateInput input____ =
    Encode.maybeObject
        [ ( "email", Encode.string input____.email |> Just ), ( "phone", Encode.string input____.phone |> Just ), ( "firstname", Encode.string input____.firstname |> Just ), ( "lastname", Encode.string input____.lastname |> Just ), ( "departmentId", Encode.string input____.departmentId |> Just ), ( "certificationId", Encode.string |> Encode.optional input____.certificationId ) ]


buildCandidateProfileUpdateInput :
    CandidateProfileUpdateInputRequiredFields
    -> (CandidateProfileUpdateInputOptionalFields -> CandidateProfileUpdateInputOptionalFields)
    -> CandidateProfileUpdateInput
buildCandidateProfileUpdateInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { highestDegreeLabel = Absent, niveauDeFormationLePlusEleveDegreeId = Absent }
    in
    { candidateId = required____.candidateId, highestDegreeId = required____.highestDegreeId, highestDegreeLabel = optionals____.highestDegreeLabel, niveauDeFormationLePlusEleveDegreeId = optionals____.niveauDeFormationLePlusEleveDegreeId }


type alias CandidateProfileUpdateInputRequiredFields =
    { candidateId : Data.Scalar.Uuid
    , highestDegreeId : Data.Scalar.Uuid
    }


type alias CandidateProfileUpdateInputOptionalFields =
    { highestDegreeLabel : OptionalArgument String
    , niveauDeFormationLePlusEleveDegreeId : OptionalArgument String
    }


{-| Type for the CandidateProfileUpdateInput input object.
-}
type alias CandidateProfileUpdateInput =
    { candidateId : Data.Scalar.Uuid
    , highestDegreeId : Data.Scalar.Uuid
    , highestDegreeLabel : OptionalArgument String
    , niveauDeFormationLePlusEleveDegreeId : OptionalArgument String
    }


{-| Encode a CandidateProfileUpdateInput into a value that can be used as an argument.
-}
encodeCandidateProfileUpdateInput : CandidateProfileUpdateInput -> Value
encodeCandidateProfileUpdateInput input____ =
    Encode.maybeObject
        [ ( "candidateId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.candidateId |> Just ), ( "highestDegreeId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.highestDegreeId |> Just ), ( "highestDegreeLabel", Encode.string |> Encode.optional input____.highestDegreeLabel ), ( "niveauDeFormationLePlusEleveDegreeId", Encode.string |> Encode.optional input____.niveauDeFormationLePlusEleveDegreeId ) ]


buildCandidateUpdateInformationInput :
    CandidateUpdateInformationInputRequiredFields
    -> (CandidateUpdateInformationInputOptionalFields -> CandidateUpdateInformationInputOptionalFields)
    -> CandidateUpdateInformationInput
buildCandidateUpdateInformationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { givenName = Absent, firstname2 = Absent, firstname3 = Absent, birthDepartmentId = Absent }
    in
    { id = required____.id, gender = required____.gender, lastname = required____.lastname, givenName = optionals____.givenName, firstname = required____.firstname, firstname2 = optionals____.firstname2, firstname3 = optionals____.firstname3, birthdate = required____.birthdate, birthCity = required____.birthCity, birthDepartmentId = optionals____.birthDepartmentId, countryId = required____.countryId, nationality = required____.nationality, street = required____.street, zip = required____.zip, city = required____.city, phone = required____.phone, email = required____.email }


type alias CandidateUpdateInformationInputRequiredFields =
    { id : Data.Scalar.Uuid
    , gender : Admin.Enum.Gender.Gender
    , lastname : String
    , firstname : String
    , birthdate : Data.Scalar.Timestamp
    , birthCity : String
    , countryId : Data.Scalar.Uuid
    , nationality : String
    , street : String
    , zip : String
    , city : String
    , phone : String
    , email : String
    }


type alias CandidateUpdateInformationInputOptionalFields =
    { givenName : OptionalArgument String
    , firstname2 : OptionalArgument String
    , firstname3 : OptionalArgument String
    , birthDepartmentId : OptionalArgument String
    }


{-| Type for the CandidateUpdateInformationInput input object.
-}
type alias CandidateUpdateInformationInput =
    { id : Data.Scalar.Uuid
    , gender : Admin.Enum.Gender.Gender
    , lastname : String
    , givenName : OptionalArgument String
    , firstname : String
    , firstname2 : OptionalArgument String
    , firstname3 : OptionalArgument String
    , birthdate : Data.Scalar.Timestamp
    , birthCity : String
    , birthDepartmentId : OptionalArgument String
    , countryId : Data.Scalar.Uuid
    , nationality : String
    , street : String
    , zip : String
    , city : String
    , phone : String
    , email : String
    }


{-| Encode a CandidateUpdateInformationInput into a value that can be used as an argument.
-}
encodeCandidateUpdateInformationInput : CandidateUpdateInformationInput -> Value
encodeCandidateUpdateInformationInput input____ =
    Encode.maybeObject
        [ ( "id", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ), ( "gender", Encode.enum Admin.Enum.Gender.toString input____.gender |> Just ), ( "lastname", Encode.string input____.lastname |> Just ), ( "givenName", Encode.string |> Encode.optional input____.givenName ), ( "firstname", Encode.string input____.firstname |> Just ), ( "firstname2", Encode.string |> Encode.optional input____.firstname2 ), ( "firstname3", Encode.string |> Encode.optional input____.firstname3 ), ( "birthdate", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) input____.birthdate |> Just ), ( "birthCity", Encode.string input____.birthCity |> Just ), ( "birthDepartmentId", Encode.string |> Encode.optional input____.birthDepartmentId ), ( "countryId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.countryId |> Just ), ( "nationality", Encode.string input____.nationality |> Just ), ( "street", Encode.string input____.street |> Just ), ( "zip", Encode.string input____.zip |> Just ), ( "city", Encode.string input____.city |> Just ), ( "phone", Encode.string input____.phone |> Just ), ( "email", Encode.string input____.email |> Just ) ]


buildCertificationChangeInput :
    CertificationChangeInputRequiredFields
    -> CertificationChangeInput
buildCertificationChangeInput required____ =
    { candidacyId = required____.candidacyId, certificationId = required____.certificationId }


type alias CertificationChangeInputRequiredFields =
    { candidacyId : Data.Scalar.Id
    , certificationId : Data.Scalar.Id
    }


{-| Type for the CertificationChangeInput input object.
-}
type alias CertificationChangeInput =
    { candidacyId : Data.Scalar.Id
    , certificationId : Data.Scalar.Id
    }


{-| Encode a CertificationChangeInput into a value that can be used as an argument.
-}
encodeCertificationChangeInput : CertificationChangeInput -> Value
encodeCertificationChangeInput input____ =
    Encode.maybeObject
        [ ( "candidacyId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.candidacyId |> Just ), ( "certificationId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.certificationId |> Just ) ]


buildCompetenceBlocInput :
    CompetenceBlocInputRequiredFields
    -> (CompetenceBlocInputOptionalFields -> CompetenceBlocInputOptionalFields)
    -> CompetenceBlocInput
buildCompetenceBlocInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, code = Absent, isOptional = Absent, fCCompetences = Absent }
    in
    { id = optionals____.id, code = optionals____.code, label = required____.label, isOptional = optionals____.isOptional, fCCompetences = optionals____.fCCompetences, competences = required____.competences }


type alias CompetenceBlocInputRequiredFields =
    { label : String
    , competences : List CompetenceInput
    }


type alias CompetenceBlocInputOptionalFields =
    { id : OptionalArgument Data.Scalar.Id
    , code : OptionalArgument String
    , isOptional : OptionalArgument Bool
    , fCCompetences : OptionalArgument String
    }


{-| Type for the CompetenceBlocInput input object.
-}
type alias CompetenceBlocInput =
    { id : OptionalArgument Data.Scalar.Id
    , code : OptionalArgument String
    , label : String
    , isOptional : OptionalArgument Bool
    , fCCompetences : OptionalArgument String
    , competences : List CompetenceInput
    }


{-| Encode a CompetenceBlocInput into a value that can be used as an argument.
-}
encodeCompetenceBlocInput : CompetenceBlocInput -> Value
encodeCompetenceBlocInput input____ =
    Encode.maybeObject
        [ ( "id", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "code", Encode.string |> Encode.optional input____.code ), ( "label", Encode.string input____.label |> Just ), ( "isOptional", Encode.bool |> Encode.optional input____.isOptional ), ( "FCCompetences", Encode.string |> Encode.optional input____.fCCompetences ), ( "competences", (encodeCompetenceInput |> Encode.list) input____.competences |> Just ) ]


buildCompetenceIdAndText :
    CompetenceIdAndTextRequiredFields
    -> CompetenceIdAndText
buildCompetenceIdAndText required____ =
    { competenceId = required____.competenceId, text = required____.text }


type alias CompetenceIdAndTextRequiredFields =
    { competenceId : Data.Scalar.Id
    , text : String
    }


{-| Type for the CompetenceIdAndText input object.
-}
type alias CompetenceIdAndText =
    { competenceId : Data.Scalar.Id
    , text : String
    }


{-| Encode a CompetenceIdAndText into a value that can be used as an argument.
-}
encodeCompetenceIdAndText : CompetenceIdAndText -> Value
encodeCompetenceIdAndText input____ =
    Encode.maybeObject
        [ ( "competenceId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.competenceId |> Just ), ( "text", Encode.string input____.text |> Just ) ]


buildCompetenceInput :
    CompetenceInputRequiredFields
    -> (CompetenceInputOptionalFields -> CompetenceInputOptionalFields)
    -> CompetenceInput
buildCompetenceInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent }
    in
    { id = optionals____.id, index = required____.index, label = required____.label }


type alias CompetenceInputRequiredFields =
    { index : Int
    , label : String
    }


type alias CompetenceInputOptionalFields =
    { id : OptionalArgument Data.Scalar.Id }


{-| Type for the CompetenceInput input object.
-}
type alias CompetenceInput =
    { id : OptionalArgument Data.Scalar.Id
    , index : Int
    , label : String
    }


{-| Encode a CompetenceInput into a value that can be used as an argument.
-}
encodeCompetenceInput : CompetenceInput -> Value
encodeCompetenceInput input____ =
    Encode.maybeObject
        [ ( "id", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "index", Encode.int input____.index |> Just ), ( "label", Encode.string input____.label |> Just ) ]


buildCreateCertificationAuthorityLocalAccountInput :
    CreateCertificationAuthorityLocalAccountInputRequiredFields
    -> CreateCertificationAuthorityLocalAccountInput
buildCreateCertificationAuthorityLocalAccountInput required____ =
    { accountFirstname = required____.accountFirstname, accountLastname = required____.accountLastname, accountEmail = required____.accountEmail, departmentIds = required____.departmentIds, certificationIds = required____.certificationIds }


type alias CreateCertificationAuthorityLocalAccountInputRequiredFields =
    { accountFirstname : String
    , accountLastname : String
    , accountEmail : String
    , departmentIds : List String
    , certificationIds : List String
    }


{-| Type for the CreateCertificationAuthorityLocalAccountInput input object.
-}
type alias CreateCertificationAuthorityLocalAccountInput =
    { accountFirstname : String
    , accountLastname : String
    , accountEmail : String
    , departmentIds : List String
    , certificationIds : List String
    }


{-| Encode a CreateCertificationAuthorityLocalAccountInput into a value that can be used as an argument.
-}
encodeCreateCertificationAuthorityLocalAccountInput : CreateCertificationAuthorityLocalAccountInput -> Value
encodeCreateCertificationAuthorityLocalAccountInput input____ =
    Encode.maybeObject
        [ ( "accountFirstname", Encode.string input____.accountFirstname |> Just ), ( "accountLastname", Encode.string input____.accountLastname |> Just ), ( "accountEmail", Encode.string input____.accountEmail |> Just ), ( "departmentIds", (Encode.string |> Encode.list) input____.departmentIds |> Just ), ( "certificationIds", (Encode.string |> Encode.list) input____.certificationIds |> Just ) ]


buildCreateOrUpdateInformationsCommercialesInput :
    CreateOrUpdateInformationsCommercialesInputRequiredFields
    -> (CreateOrUpdateInformationsCommercialesInputOptionalFields -> CreateOrUpdateInformationsCommercialesInputOptionalFields)
    -> CreateOrUpdateInformationsCommercialesInput
buildCreateOrUpdateInformationsCommercialesInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { nom = Absent, telephone = Absent, siteInternet = Absent, emailContact = Absent, adresseNumeroEtNomDeRue = Absent, adresseInformationsComplementaires = Absent, adresseCodePostal = Absent, adresseVille = Absent, conformeNormesAccessbilite = Absent }
    in
    { organismId = required____.organismId, nom = optionals____.nom, telephone = optionals____.telephone, siteInternet = optionals____.siteInternet, emailContact = optionals____.emailContact, adresseNumeroEtNomDeRue = optionals____.adresseNumeroEtNomDeRue, adresseInformationsComplementaires = optionals____.adresseInformationsComplementaires, adresseCodePostal = optionals____.adresseCodePostal, adresseVille = optionals____.adresseVille, conformeNormesAccessbilite = optionals____.conformeNormesAccessbilite }


type alias CreateOrUpdateInformationsCommercialesInputRequiredFields =
    { organismId : Data.Scalar.Uuid }


type alias CreateOrUpdateInformationsCommercialesInputOptionalFields =
    { nom : OptionalArgument String
    , telephone : OptionalArgument String
    , siteInternet : OptionalArgument String
    , emailContact : OptionalArgument String
    , adresseNumeroEtNomDeRue : OptionalArgument String
    , adresseInformationsComplementaires : OptionalArgument String
    , adresseCodePostal : OptionalArgument String
    , adresseVille : OptionalArgument String
    , conformeNormesAccessbilite : OptionalArgument Admin.Enum.ConformiteNormeAccessibilite.ConformiteNormeAccessibilite
    }


{-| Type for the CreateOrUpdateInformationsCommercialesInput input object.
-}
type alias CreateOrUpdateInformationsCommercialesInput =
    { organismId : Data.Scalar.Uuid
    , nom : OptionalArgument String
    , telephone : OptionalArgument String
    , siteInternet : OptionalArgument String
    , emailContact : OptionalArgument String
    , adresseNumeroEtNomDeRue : OptionalArgument String
    , adresseInformationsComplementaires : OptionalArgument String
    , adresseCodePostal : OptionalArgument String
    , adresseVille : OptionalArgument String
    , conformeNormesAccessbilite : OptionalArgument Admin.Enum.ConformiteNormeAccessibilite.ConformiteNormeAccessibilite
    }


{-| Encode a CreateOrUpdateInformationsCommercialesInput into a value that can be used as an argument.
-}
encodeCreateOrUpdateInformationsCommercialesInput : CreateOrUpdateInformationsCommercialesInput -> Value
encodeCreateOrUpdateInformationsCommercialesInput input____ =
    Encode.maybeObject
        [ ( "organismId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.organismId |> Just ), ( "nom", Encode.string |> Encode.optional input____.nom ), ( "telephone", Encode.string |> Encode.optional input____.telephone ), ( "siteInternet", Encode.string |> Encode.optional input____.siteInternet ), ( "emailContact", Encode.string |> Encode.optional input____.emailContact ), ( "adresseNumeroEtNomDeRue", Encode.string |> Encode.optional input____.adresseNumeroEtNomDeRue ), ( "adresseInformationsComplementaires", Encode.string |> Encode.optional input____.adresseInformationsComplementaires ), ( "adresseCodePostal", Encode.string |> Encode.optional input____.adresseCodePostal ), ( "adresseVille", Encode.string |> Encode.optional input____.adresseVille ), ( "conformeNormesAccessbilite", Encode.enum Admin.Enum.ConformiteNormeAccessibilite.toString |> Encode.optional input____.conformeNormesAccessbilite ) ]


buildCreateOrUpdateOrganismOnDegreesInput :
    CreateOrUpdateOrganismOnDegreesInputRequiredFields
    -> CreateOrUpdateOrganismOnDegreesInput
buildCreateOrUpdateOrganismOnDegreesInput required____ =
    { organismId = required____.organismId, degreeIds = required____.degreeIds }


type alias CreateOrUpdateOrganismOnDegreesInputRequiredFields =
    { organismId : Data.Scalar.Id
    , degreeIds : List Data.Scalar.Id
    }


{-| Type for the CreateOrUpdateOrganismOnDegreesInput input object.
-}
type alias CreateOrUpdateOrganismOnDegreesInput =
    { organismId : Data.Scalar.Id
    , degreeIds : List Data.Scalar.Id
    }


{-| Encode a CreateOrUpdateOrganismOnDegreesInput into a value that can be used as an argument.
-}
encodeCreateOrUpdateOrganismOnDegreesInput : CreateOrUpdateOrganismOnDegreesInput -> Value
encodeCreateOrUpdateOrganismOnDegreesInput input____ =
    Encode.maybeObject
        [ ( "organismId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.organismId |> Just ), ( "degreeIds", ((Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.degreeIds |> Just ) ]


buildCreateOrUpdateOrganismWithMaisonMereAAPInput :
    CreateOrUpdateOrganismWithMaisonMereAAPInputRequiredFields
    -> (CreateOrUpdateOrganismWithMaisonMereAAPInputOptionalFields -> CreateOrUpdateOrganismWithMaisonMereAAPInputOptionalFields)
    -> CreateOrUpdateOrganismWithMaisonMereAAPInput
buildCreateOrUpdateOrganismWithMaisonMereAAPInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { adresseInformationsComplementaires = Absent, website = Absent, accountId = Absent }
    in
    { nom = required____.nom, address = required____.address, adresseInformationsComplementaires = optionals____.adresseInformationsComplementaires, zip = required____.zip, city = required____.city, contactAdministrativeEmail = required____.contactAdministrativeEmail, contactAdministrativePhone = required____.contactAdministrativePhone, website = optionals____.website, conformeNormesAccessbilite = required____.conformeNormesAccessbilite, departmentsWithOrganismMethods = required____.departmentsWithOrganismMethods, firstname = required____.firstname, lastname = required____.lastname, email = required____.email, accountId = optionals____.accountId }


type alias CreateOrUpdateOrganismWithMaisonMereAAPInputRequiredFields =
    { nom : String
    , address : String
    , zip : String
    , city : String
    , contactAdministrativeEmail : String
    , contactAdministrativePhone : String
    , conformeNormesAccessbilite : Admin.Enum.ConformiteNormeAccessibilite.ConformiteNormeAccessibilite
    , departmentsWithOrganismMethods : List DepartmentWithOrganismMethodsInput
    , firstname : String
    , lastname : String
    , email : String
    }


type alias CreateOrUpdateOrganismWithMaisonMereAAPInputOptionalFields =
    { adresseInformationsComplementaires : OptionalArgument String
    , website : OptionalArgument String
    , accountId : OptionalArgument Data.Scalar.Uuid
    }


{-| Type for the CreateOrUpdateOrganismWithMaisonMereAAPInput input object.
-}
type alias CreateOrUpdateOrganismWithMaisonMereAAPInput =
    { nom : String
    , address : String
    , adresseInformationsComplementaires : OptionalArgument String
    , zip : String
    , city : String
    , contactAdministrativeEmail : String
    , contactAdministrativePhone : String
    , website : OptionalArgument String
    , conformeNormesAccessbilite : Admin.Enum.ConformiteNormeAccessibilite.ConformiteNormeAccessibilite
    , departmentsWithOrganismMethods : List DepartmentWithOrganismMethodsInput
    , firstname : String
    , lastname : String
    , email : String
    , accountId : OptionalArgument Data.Scalar.Uuid
    }


{-| Encode a CreateOrUpdateOrganismWithMaisonMereAAPInput into a value that can be used as an argument.
-}
encodeCreateOrUpdateOrganismWithMaisonMereAAPInput : CreateOrUpdateOrganismWithMaisonMereAAPInput -> Value
encodeCreateOrUpdateOrganismWithMaisonMereAAPInput input____ =
    Encode.maybeObject
        [ ( "nom", Encode.string input____.nom |> Just ), ( "address", Encode.string input____.address |> Just ), ( "adresseInformationsComplementaires", Encode.string |> Encode.optional input____.adresseInformationsComplementaires ), ( "zip", Encode.string input____.zip |> Just ), ( "city", Encode.string input____.city |> Just ), ( "contactAdministrativeEmail", Encode.string input____.contactAdministrativeEmail |> Just ), ( "contactAdministrativePhone", Encode.string input____.contactAdministrativePhone |> Just ), ( "website", Encode.string |> Encode.optional input____.website ), ( "conformeNormesAccessbilite", Encode.enum Admin.Enum.ConformiteNormeAccessibilite.toString input____.conformeNormesAccessbilite |> Just ), ( "departmentsWithOrganismMethods", (encodeDepartmentWithOrganismMethodsInput |> Encode.list) input____.departmentsWithOrganismMethods |> Just ), ( "firstname", Encode.string input____.firstname |> Just ), ( "lastname", Encode.string input____.lastname |> Just ), ( "email", Encode.string input____.email |> Just ), ( "accountId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.accountId ) ]


buildDematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput :
    DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInputRequiredFields
    -> DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput
buildDematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput required____ =
    { candidacyId = required____.candidacyId, dematerializedFeasibilityFileId = required____.dematerializedFeasibilityFileId, competenceBlocId = required____.competenceBlocId, competenceIdAndTexts = required____.competenceIdAndTexts }


type alias DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInputRequiredFields =
    { candidacyId : Data.Scalar.Id
    , dematerializedFeasibilityFileId : Data.Scalar.Id
    , competenceBlocId : Data.Scalar.Id
    , competenceIdAndTexts : List CompetenceIdAndText
    }


{-| Type for the DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput input object.
-}
type alias DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput =
    { candidacyId : Data.Scalar.Id
    , dematerializedFeasibilityFileId : Data.Scalar.Id
    , competenceBlocId : Data.Scalar.Id
    , competenceIdAndTexts : List CompetenceIdAndText
    }


{-| Encode a DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput into a value that can be used as an argument.
-}
encodeDematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput : DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput -> Value
encodeDematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput input____ =
    Encode.maybeObject
        [ ( "candidacyId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.candidacyId |> Just ), ( "dematerializedFeasibilityFileId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.dematerializedFeasibilityFileId |> Just ), ( "competenceBlocId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.competenceBlocId |> Just ), ( "competenceIdAndTexts", (encodeCompetenceIdAndText |> Encode.list) input____.competenceIdAndTexts |> Just ) ]


buildDematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput :
    DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInputRequiredFields
    -> (DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInputOptionalFields -> DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInputOptionalFields)
    -> DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput
buildDematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { firstForeignLanguage = Absent, secondForeignLanguage = Absent, option = Absent }
    in
    { candidacyId = required____.candidacyId, firstForeignLanguage = optionals____.firstForeignLanguage, secondForeignLanguage = optionals____.secondForeignLanguage, option = optionals____.option, blocDeCompetencesIds = required____.blocDeCompetencesIds, completion = required____.completion }


type alias DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInputRequiredFields =
    { candidacyId : String
    , blocDeCompetencesIds : List String
    , completion : Admin.Enum.CertificationCompletion.CertificationCompletion
    }


type alias DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInputOptionalFields =
    { firstForeignLanguage : OptionalArgument String
    , secondForeignLanguage : OptionalArgument String
    , option : OptionalArgument String
    }


{-| Type for the DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput input object.
-}
type alias DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput =
    { candidacyId : String
    , firstForeignLanguage : OptionalArgument String
    , secondForeignLanguage : OptionalArgument String
    , option : OptionalArgument String
    , blocDeCompetencesIds : List String
    , completion : Admin.Enum.CertificationCompletion.CertificationCompletion
    }


{-| Encode a DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput into a value that can be used as an argument.
-}
encodeDematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput : DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput -> Value
encodeDematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput input____ =
    Encode.maybeObject
        [ ( "candidacyId", Encode.string input____.candidacyId |> Just ), ( "firstForeignLanguage", Encode.string |> Encode.optional input____.firstForeignLanguage ), ( "secondForeignLanguage", Encode.string |> Encode.optional input____.secondForeignLanguage ), ( "option", Encode.string |> Encode.optional input____.option ), ( "blocDeCompetencesIds", (Encode.string |> Encode.list) input____.blocDeCompetencesIds |> Just ), ( "completion", Encode.enum Admin.Enum.CertificationCompletion.toString input____.completion |> Just ) ]


buildDepartmentWithOrganismMethodsInput :
    DepartmentWithOrganismMethodsInputRequiredFields
    -> DepartmentWithOrganismMethodsInput
buildDepartmentWithOrganismMethodsInput required____ =
    { departmentId = required____.departmentId, isOnSite = required____.isOnSite, isRemote = required____.isRemote }


type alias DepartmentWithOrganismMethodsInputRequiredFields =
    { departmentId : Data.Scalar.Uuid
    , isOnSite : Bool
    , isRemote : Bool
    }


{-| Type for the DepartmentWithOrganismMethodsInput input object.
-}
type alias DepartmentWithOrganismMethodsInput =
    { departmentId : Data.Scalar.Uuid
    , isOnSite : Bool
    , isRemote : Bool
    }


{-| Encode a DepartmentWithOrganismMethodsInput into a value that can be used as an argument.
-}
encodeDepartmentWithOrganismMethodsInput : DepartmentWithOrganismMethodsInput -> Value
encodeDepartmentWithOrganismMethodsInput input____ =
    Encode.maybeObject
        [ ( "departmentId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.departmentId |> Just ), ( "isOnSite", Encode.bool input____.isOnSite |> Just ), ( "isRemote", Encode.bool input____.isRemote |> Just ) ]


buildDropOutInput :
    DropOutInputRequiredFields
    -> (DropOutInputOptionalFields -> DropOutInputOptionalFields)
    -> DropOutInput
buildDropOutInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { otherReasonContent = Absent }
    in
    { droppedOutAt = required____.droppedOutAt, dropOutReasonId = required____.dropOutReasonId, otherReasonContent = optionals____.otherReasonContent }


type alias DropOutInputRequiredFields =
    { droppedOutAt : Data.Scalar.Timestamp
    , dropOutReasonId : Data.Scalar.Uuid
    }


type alias DropOutInputOptionalFields =
    { otherReasonContent : OptionalArgument String }


{-| Type for the DropOutInput input object.
-}
type alias DropOutInput =
    { droppedOutAt : Data.Scalar.Timestamp
    , dropOutReasonId : Data.Scalar.Uuid
    , otherReasonContent : OptionalArgument String
    }


{-| Encode a DropOutInput into a value that can be used as an argument.
-}
encodeDropOutInput : DropOutInput -> Value
encodeDropOutInput input____ =
    Encode.maybeObject
        [ ( "droppedOutAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) input____.droppedOutAt |> Just ), ( "dropOutReasonId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.dropOutReasonId |> Just ), ( "otherReasonContent", Encode.string |> Encode.optional input____.otherReasonContent ) ]


buildExamInfoInput :
    (ExamInfoInputOptionalFields -> ExamInfoInputOptionalFields)
    -> ExamInfoInput
buildExamInfoInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { examResult = Absent, estimatedExamDate = Absent, actualExamDate = Absent }
    in
    { examResult = optionals____.examResult, estimatedExamDate = optionals____.estimatedExamDate, actualExamDate = optionals____.actualExamDate }


type alias ExamInfoInputOptionalFields =
    { examResult : OptionalArgument Admin.Enum.ExamResult.ExamResult
    , estimatedExamDate : OptionalArgument Data.Scalar.Timestamp
    , actualExamDate : OptionalArgument Data.Scalar.Timestamp
    }


{-| Type for the ExamInfoInput input object.
-}
type alias ExamInfoInput =
    { examResult : OptionalArgument Admin.Enum.ExamResult.ExamResult
    , estimatedExamDate : OptionalArgument Data.Scalar.Timestamp
    , actualExamDate : OptionalArgument Data.Scalar.Timestamp
    }


{-| Encode a ExamInfoInput into a value that can be used as an argument.
-}
encodeExamInfoInput : ExamInfoInput -> Value
encodeExamInfoInput input____ =
    Encode.maybeObject
        [ ( "examResult", Encode.enum Admin.Enum.ExamResult.toString |> Encode.optional input____.examResult ), ( "estimatedExamDate", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) |> Encode.optional input____.estimatedExamDate ), ( "actualExamDate", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) |> Encode.optional input____.actualExamDate ) ]


buildExperienceInput :
    ExperienceInputRequiredFields
    -> ExperienceInput
buildExperienceInput required____ =
    { title = required____.title, startedAt = required____.startedAt, duration = required____.duration, description = required____.description }


type alias ExperienceInputRequiredFields =
    { title : String
    , startedAt : Data.Scalar.Timestamp
    , duration : Admin.Enum.Duration.Duration
    , description : String
    }


{-| Type for the ExperienceInput input object.
-}
type alias ExperienceInput =
    { title : String
    , startedAt : Data.Scalar.Timestamp
    , duration : Admin.Enum.Duration.Duration
    , description : String
    }


{-| Encode a ExperienceInput into a value that can be used as an argument.
-}
encodeExperienceInput : ExperienceInput -> Value
encodeExperienceInput input____ =
    Encode.maybeObject
        [ ( "title", Encode.string input____.title |> Just ), ( "startedAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) input____.startedAt |> Just ), ( "duration", Encode.enum Admin.Enum.Duration.toString input____.duration |> Just ), ( "description", Encode.string input____.description |> Just ) ]


buildFullCandidateInput :
    (FullCandidateInputOptionalFields -> FullCandidateInputOptionalFields)
    -> FullCandidateInput
buildFullCandidateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { gender = Absent, firstname = Absent, firstname2 = Absent, firstname3 = Absent, lastname = Absent, email = Absent, phone = Absent, highestDegreeId = Absent, vulnerabilityIndicatorId = Absent }
    in
    { gender = optionals____.gender, firstname = optionals____.firstname, firstname2 = optionals____.firstname2, firstname3 = optionals____.firstname3, lastname = optionals____.lastname, email = optionals____.email, phone = optionals____.phone, highestDegreeId = optionals____.highestDegreeId, vulnerabilityIndicatorId = optionals____.vulnerabilityIndicatorId }


type alias FullCandidateInputOptionalFields =
    { gender : OptionalArgument Admin.Enum.Gender.Gender
    , firstname : OptionalArgument String
    , firstname2 : OptionalArgument String
    , firstname3 : OptionalArgument String
    , lastname : OptionalArgument String
    , email : OptionalArgument String
    , phone : OptionalArgument String
    , highestDegreeId : OptionalArgument Data.Scalar.Uuid
    , vulnerabilityIndicatorId : OptionalArgument Data.Scalar.Uuid
    }


{-| Type for the FullCandidateInput input object.
-}
type alias FullCandidateInput =
    { gender : OptionalArgument Admin.Enum.Gender.Gender
    , firstname : OptionalArgument String
    , firstname2 : OptionalArgument String
    , firstname3 : OptionalArgument String
    , lastname : OptionalArgument String
    , email : OptionalArgument String
    , phone : OptionalArgument String
    , highestDegreeId : OptionalArgument Data.Scalar.Uuid
    , vulnerabilityIndicatorId : OptionalArgument Data.Scalar.Uuid
    }


{-| Encode a FullCandidateInput into a value that can be used as an argument.
-}
encodeFullCandidateInput : FullCandidateInput -> Value
encodeFullCandidateInput input____ =
    Encode.maybeObject
        [ ( "gender", Encode.enum Admin.Enum.Gender.toString |> Encode.optional input____.gender ), ( "firstname", Encode.string |> Encode.optional input____.firstname ), ( "firstname2", Encode.string |> Encode.optional input____.firstname2 ), ( "firstname3", Encode.string |> Encode.optional input____.firstname3 ), ( "lastname", Encode.string |> Encode.optional input____.lastname ), ( "email", Encode.string |> Encode.optional input____.email ), ( "phone", Encode.string |> Encode.optional input____.phone ), ( "highestDegreeId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.highestDegreeId ), ( "vulnerabilityIndicatorId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.vulnerabilityIndicatorId ) ]


buildFundingRequestInput :
    FundingRequestInputRequiredFields
    -> (FundingRequestInputOptionalFields -> FundingRequestInputOptionalFields)
    -> FundingRequestInput
buildFundingRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { companionId = Absent }
    in
    { companionId = optionals____.companionId, diagnosisHourCount = required____.diagnosisHourCount, diagnosisCost = required____.diagnosisCost, postExamHourCount = required____.postExamHourCount, postExamCost = required____.postExamCost, individualHourCount = required____.individualHourCount, individualCost = required____.individualCost, collectiveHourCount = required____.collectiveHourCount, collectiveCost = required____.collectiveCost, basicSkillsIds = required____.basicSkillsIds, basicSkillsHourCount = required____.basicSkillsHourCount, basicSkillsCost = required____.basicSkillsCost, mandatoryTrainingsIds = required____.mandatoryTrainingsIds, mandatoryTrainingsHourCount = required____.mandatoryTrainingsHourCount, mandatoryTrainingsCost = required____.mandatoryTrainingsCost, certificateSkills = required____.certificateSkills, certificateSkillsHourCount = required____.certificateSkillsHourCount, certificateSkillsCost = required____.certificateSkillsCost, otherTraining = required____.otherTraining, otherTrainingHourCount = required____.otherTrainingHourCount, otherTrainingCost = required____.otherTrainingCost, examHourCount = required____.examHourCount, examCost = required____.examCost }


type alias FundingRequestInputRequiredFields =
    { diagnosisHourCount : Int
    , diagnosisCost : Data.Scalar.Decimal
    , postExamHourCount : Int
    , postExamCost : Data.Scalar.Decimal
    , individualHourCount : Int
    , individualCost : Data.Scalar.Decimal
    , collectiveHourCount : Int
    , collectiveCost : Data.Scalar.Decimal
    , basicSkillsIds : List Data.Scalar.Uuid
    , basicSkillsHourCount : Int
    , basicSkillsCost : Data.Scalar.Decimal
    , mandatoryTrainingsIds : List Data.Scalar.Uuid
    , mandatoryTrainingsHourCount : Int
    , mandatoryTrainingsCost : Data.Scalar.Decimal
    , certificateSkills : String
    , certificateSkillsHourCount : Int
    , certificateSkillsCost : Data.Scalar.Decimal
    , otherTraining : String
    , otherTrainingHourCount : Int
    , otherTrainingCost : Data.Scalar.Decimal
    , examHourCount : Int
    , examCost : Data.Scalar.Decimal
    }


type alias FundingRequestInputOptionalFields =
    { companionId : OptionalArgument Data.Scalar.Uuid }


{-| Type for the FundingRequestInput input object.
-}
type alias FundingRequestInput =
    { companionId : OptionalArgument Data.Scalar.Uuid
    , diagnosisHourCount : Int
    , diagnosisCost : Data.Scalar.Decimal
    , postExamHourCount : Int
    , postExamCost : Data.Scalar.Decimal
    , individualHourCount : Int
    , individualCost : Data.Scalar.Decimal
    , collectiveHourCount : Int
    , collectiveCost : Data.Scalar.Decimal
    , basicSkillsIds : List Data.Scalar.Uuid
    , basicSkillsHourCount : Int
    , basicSkillsCost : Data.Scalar.Decimal
    , mandatoryTrainingsIds : List Data.Scalar.Uuid
    , mandatoryTrainingsHourCount : Int
    , mandatoryTrainingsCost : Data.Scalar.Decimal
    , certificateSkills : String
    , certificateSkillsHourCount : Int
    , certificateSkillsCost : Data.Scalar.Decimal
    , otherTraining : String
    , otherTrainingHourCount : Int
    , otherTrainingCost : Data.Scalar.Decimal
    , examHourCount : Int
    , examCost : Data.Scalar.Decimal
    }


{-| Encode a FundingRequestInput into a value that can be used as an argument.
-}
encodeFundingRequestInput : FundingRequestInput -> Value
encodeFundingRequestInput input____ =
    Encode.maybeObject
        [ ( "companionId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.companionId ), ( "diagnosisHourCount", Encode.int input____.diagnosisHourCount |> Just ), ( "diagnosisCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.diagnosisCost |> Just ), ( "postExamHourCount", Encode.int input____.postExamHourCount |> Just ), ( "postExamCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.postExamCost |> Just ), ( "individualHourCount", Encode.int input____.individualHourCount |> Just ), ( "individualCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.individualCost |> Just ), ( "collectiveHourCount", Encode.int input____.collectiveHourCount |> Just ), ( "collectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.collectiveCost |> Just ), ( "basicSkillsIds", ((Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.basicSkillsIds |> Just ), ( "basicSkillsHourCount", Encode.int input____.basicSkillsHourCount |> Just ), ( "basicSkillsCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.basicSkillsCost |> Just ), ( "mandatoryTrainingsIds", ((Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.mandatoryTrainingsIds |> Just ), ( "mandatoryTrainingsHourCount", Encode.int input____.mandatoryTrainingsHourCount |> Just ), ( "mandatoryTrainingsCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.mandatoryTrainingsCost |> Just ), ( "certificateSkills", Encode.string input____.certificateSkills |> Just ), ( "certificateSkillsHourCount", Encode.int input____.certificateSkillsHourCount |> Just ), ( "certificateSkillsCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.certificateSkillsCost |> Just ), ( "otherTraining", Encode.string input____.otherTraining |> Just ), ( "otherTrainingHourCount", Encode.int input____.otherTrainingHourCount |> Just ), ( "otherTrainingCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.otherTrainingCost |> Just ), ( "examHourCount", Encode.int input____.examHourCount |> Just ), ( "examCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.examCost |> Just ) ]


buildFundingRequestUnifvaeInput :
    FundingRequestUnifvaeInputRequiredFields
    -> (FundingRequestUnifvaeInputOptionalFields -> FundingRequestUnifvaeInputOptionalFields)
    -> FundingRequestUnifvaeInput
buildFundingRequestUnifvaeInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { candidateSecondname = Absent, candidateThirdname = Absent, fundingContactFirstname = Absent, fundingContactLastname = Absent, fundingContactEmail = Absent, fundingContactPhone = Absent }
    in
    { candidateSecondname = optionals____.candidateSecondname, candidateThirdname = optionals____.candidateThirdname, candidateGender = required____.candidateGender, individualHourCount = required____.individualHourCount, individualCost = required____.individualCost, collectiveHourCount = required____.collectiveHourCount, collectiveCost = required____.collectiveCost, basicSkillsHourCount = required____.basicSkillsHourCount, basicSkillsCost = required____.basicSkillsCost, mandatoryTrainingsHourCount = required____.mandatoryTrainingsHourCount, mandatoryTrainingsCost = required____.mandatoryTrainingsCost, certificateSkillsHourCount = required____.certificateSkillsHourCount, certificateSkillsCost = required____.certificateSkillsCost, otherTrainingHourCount = required____.otherTrainingHourCount, otherTrainingCost = required____.otherTrainingCost, fundingContactFirstname = optionals____.fundingContactFirstname, fundingContactLastname = optionals____.fundingContactLastname, fundingContactEmail = optionals____.fundingContactEmail, fundingContactPhone = optionals____.fundingContactPhone }


type alias FundingRequestUnifvaeInputRequiredFields =
    { candidateGender : Admin.Enum.Gender.Gender
    , individualHourCount : Data.Scalar.Decimal
    , individualCost : Data.Scalar.Decimal
    , collectiveHourCount : Data.Scalar.Decimal
    , collectiveCost : Data.Scalar.Decimal
    , basicSkillsHourCount : Data.Scalar.Decimal
    , basicSkillsCost : Data.Scalar.Decimal
    , mandatoryTrainingsHourCount : Data.Scalar.Decimal
    , mandatoryTrainingsCost : Data.Scalar.Decimal
    , certificateSkillsHourCount : Data.Scalar.Decimal
    , certificateSkillsCost : Data.Scalar.Decimal
    , otherTrainingHourCount : Data.Scalar.Decimal
    , otherTrainingCost : Data.Scalar.Decimal
    }


type alias FundingRequestUnifvaeInputOptionalFields =
    { candidateSecondname : OptionalArgument String
    , candidateThirdname : OptionalArgument String
    , fundingContactFirstname : OptionalArgument String
    , fundingContactLastname : OptionalArgument String
    , fundingContactEmail : OptionalArgument String
    , fundingContactPhone : OptionalArgument String
    }


{-| Type for the FundingRequestUnifvaeInput input object.
-}
type alias FundingRequestUnifvaeInput =
    { candidateSecondname : OptionalArgument String
    , candidateThirdname : OptionalArgument String
    , candidateGender : Admin.Enum.Gender.Gender
    , individualHourCount : Data.Scalar.Decimal
    , individualCost : Data.Scalar.Decimal
    , collectiveHourCount : Data.Scalar.Decimal
    , collectiveCost : Data.Scalar.Decimal
    , basicSkillsHourCount : Data.Scalar.Decimal
    , basicSkillsCost : Data.Scalar.Decimal
    , mandatoryTrainingsHourCount : Data.Scalar.Decimal
    , mandatoryTrainingsCost : Data.Scalar.Decimal
    , certificateSkillsHourCount : Data.Scalar.Decimal
    , certificateSkillsCost : Data.Scalar.Decimal
    , otherTrainingHourCount : Data.Scalar.Decimal
    , otherTrainingCost : Data.Scalar.Decimal
    , fundingContactFirstname : OptionalArgument String
    , fundingContactLastname : OptionalArgument String
    , fundingContactEmail : OptionalArgument String
    , fundingContactPhone : OptionalArgument String
    }


{-| Encode a FundingRequestUnifvaeInput into a value that can be used as an argument.
-}
encodeFundingRequestUnifvaeInput : FundingRequestUnifvaeInput -> Value
encodeFundingRequestUnifvaeInput input____ =
    Encode.maybeObject
        [ ( "candidateSecondname", Encode.string |> Encode.optional input____.candidateSecondname ), ( "candidateThirdname", Encode.string |> Encode.optional input____.candidateThirdname ), ( "candidateGender", Encode.enum Admin.Enum.Gender.toString input____.candidateGender |> Just ), ( "individualHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.individualHourCount |> Just ), ( "individualCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.individualCost |> Just ), ( "collectiveHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.collectiveHourCount |> Just ), ( "collectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.collectiveCost |> Just ), ( "basicSkillsHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.basicSkillsHourCount |> Just ), ( "basicSkillsCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.basicSkillsCost |> Just ), ( "mandatoryTrainingsHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.mandatoryTrainingsHourCount |> Just ), ( "mandatoryTrainingsCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.mandatoryTrainingsCost |> Just ), ( "certificateSkillsHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.certificateSkillsHourCount |> Just ), ( "certificateSkillsCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.certificateSkillsCost |> Just ), ( "otherTrainingHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.otherTrainingHourCount |> Just ), ( "otherTrainingCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.otherTrainingCost |> Just ), ( "fundingContactFirstname", Encode.string |> Encode.optional input____.fundingContactFirstname ), ( "fundingContactLastname", Encode.string |> Encode.optional input____.fundingContactLastname ), ( "fundingContactEmail", Encode.string |> Encode.optional input____.fundingContactEmail ), ( "fundingContactPhone", Encode.string |> Encode.optional input____.fundingContactPhone ) ]


buildGetImpersonateUrlInput :
    (GetImpersonateUrlInputOptionalFields -> GetImpersonateUrlInputOptionalFields)
    -> GetImpersonateUrlInput
buildGetImpersonateUrlInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { accountId = Absent, candidateId = Absent }
    in
    { accountId = optionals____.accountId, candidateId = optionals____.candidateId }


type alias GetImpersonateUrlInputOptionalFields =
    { accountId : OptionalArgument String
    , candidateId : OptionalArgument String
    }


{-| Type for the GetImpersonateUrlInput input object.
-}
type alias GetImpersonateUrlInput =
    { accountId : OptionalArgument String
    , candidateId : OptionalArgument String
    }


{-| Encode a GetImpersonateUrlInput into a value that can be used as an argument.
-}
encodeGetImpersonateUrlInput : GetImpersonateUrlInput -> Value
encodeGetImpersonateUrlInput input____ =
    Encode.maybeObject
        [ ( "accountId", Encode.string |> Encode.optional input____.accountId ), ( "candidateId", Encode.string |> Encode.optional input____.candidateId ) ]


buildInterventionZoneInput :
    InterventionZoneInputRequiredFields
    -> InterventionZoneInput
buildInterventionZoneInput required____ =
    { departmentId = required____.departmentId, isOnSite = required____.isOnSite, isRemote = required____.isRemote }


type alias InterventionZoneInputRequiredFields =
    { departmentId : Data.Scalar.Id
    , isOnSite : Bool
    , isRemote : Bool
    }


{-| Type for the InterventionZoneInput input object.
-}
type alias InterventionZoneInput =
    { departmentId : Data.Scalar.Id
    , isOnSite : Bool
    , isRemote : Bool
    }


{-| Encode a InterventionZoneInput into a value that can be used as an argument.
-}
encodeInterventionZoneInput : InterventionZoneInput -> Value
encodeInterventionZoneInput input____ =
    Encode.maybeObject
        [ ( "departmentId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.departmentId |> Just ), ( "isOnSite", Encode.bool input____.isOnSite |> Just ), ( "isRemote", Encode.bool input____.isRemote |> Just ) ]


buildJuryInfoInput :
    JuryInfoInputRequiredFields
    -> (JuryInfoInputOptionalFields -> JuryInfoInputOptionalFields)
    -> JuryInfoInput
buildJuryInfoInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { informationOfResult = Absent }
    in
    { result = required____.result, informationOfResult = optionals____.informationOfResult }


type alias JuryInfoInputRequiredFields =
    { result : Admin.Enum.JuryResult.JuryResult }


type alias JuryInfoInputOptionalFields =
    { informationOfResult : OptionalArgument String }


{-| Type for the JuryInfoInput input object.
-}
type alias JuryInfoInput =
    { result : Admin.Enum.JuryResult.JuryResult
    , informationOfResult : OptionalArgument String
    }


{-| Encode a JuryInfoInput into a value that can be used as an argument.
-}
encodeJuryInfoInput : JuryInfoInput -> Value
encodeJuryInfoInput input____ =
    Encode.maybeObject
        [ ( "result", Encode.enum Admin.Enum.JuryResult.toString input____.result |> Just ), ( "informationOfResult", Encode.string |> Encode.optional input____.informationOfResult ) ]


buildMaisonMereAAPOnDepartmentInput :
    MaisonMereAAPOnDepartmentInputRequiredFields
    -> MaisonMereAAPOnDepartmentInput
buildMaisonMereAAPOnDepartmentInput required____ =
    { departmentId = required____.departmentId, isOnSite = required____.isOnSite, isRemote = required____.isRemote }


type alias MaisonMereAAPOnDepartmentInputRequiredFields =
    { departmentId : Data.Scalar.Uuid
    , isOnSite : Bool
    , isRemote : Bool
    }


{-| Type for the MaisonMereAAPOnDepartmentInput input object.
-}
type alias MaisonMereAAPOnDepartmentInput =
    { departmentId : Data.Scalar.Uuid
    , isOnSite : Bool
    , isRemote : Bool
    }


{-| Encode a MaisonMereAAPOnDepartmentInput into a value that can be used as an argument.
-}
encodeMaisonMereAAPOnDepartmentInput : MaisonMereAAPOnDepartmentInput -> Value
encodeMaisonMereAAPOnDepartmentInput input____ =
    Encode.maybeObject
        [ ( "departmentId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) input____.departmentId |> Just ), ( "isOnSite", Encode.bool input____.isOnSite |> Just ), ( "isRemote", Encode.bool input____.isRemote |> Just ) ]


buildPaymentRequestInput :
    PaymentRequestInputRequiredFields
    -> PaymentRequestInput
buildPaymentRequestInput required____ =
    { diagnosisEffectiveHourCount = required____.diagnosisEffectiveHourCount, diagnosisEffectiveCost = required____.diagnosisEffectiveCost, postExamEffectiveHourCount = required____.postExamEffectiveHourCount, postExamEffectiveCost = required____.postExamEffectiveCost, individualEffectiveHourCount = required____.individualEffectiveHourCount, individualEffectiveCost = required____.individualEffectiveCost, collectiveEffectiveHourCount = required____.collectiveEffectiveHourCount, collectiveEffectiveCost = required____.collectiveEffectiveCost, mandatoryTrainingsEffectiveHourCount = required____.mandatoryTrainingsEffectiveHourCount, mandatoryTrainingsEffectiveCost = required____.mandatoryTrainingsEffectiveCost, basicSkillsEffectiveHourCount = required____.basicSkillsEffectiveHourCount, basicSkillsEffectiveCost = required____.basicSkillsEffectiveCost, certificateSkillsEffectiveHourCount = required____.certificateSkillsEffectiveHourCount, certificateSkillsEffectiveCost = required____.certificateSkillsEffectiveCost, otherTrainingEffectiveHourCount = required____.otherTrainingEffectiveHourCount, otherTrainingEffectiveCost = required____.otherTrainingEffectiveCost, examEffectiveHourCount = required____.examEffectiveHourCount, examEffectiveCost = required____.examEffectiveCost, invoiceNumber = required____.invoiceNumber }


type alias PaymentRequestInputRequiredFields =
    { diagnosisEffectiveHourCount : Int
    , diagnosisEffectiveCost : Data.Scalar.Decimal
    , postExamEffectiveHourCount : Int
    , postExamEffectiveCost : Data.Scalar.Decimal
    , individualEffectiveHourCount : Int
    , individualEffectiveCost : Data.Scalar.Decimal
    , collectiveEffectiveHourCount : Int
    , collectiveEffectiveCost : Data.Scalar.Decimal
    , mandatoryTrainingsEffectiveHourCount : Int
    , mandatoryTrainingsEffectiveCost : Data.Scalar.Decimal
    , basicSkillsEffectiveHourCount : Int
    , basicSkillsEffectiveCost : Data.Scalar.Decimal
    , certificateSkillsEffectiveHourCount : Int
    , certificateSkillsEffectiveCost : Data.Scalar.Decimal
    , otherTrainingEffectiveHourCount : Int
    , otherTrainingEffectiveCost : Data.Scalar.Decimal
    , examEffectiveHourCount : Int
    , examEffectiveCost : Data.Scalar.Decimal
    , invoiceNumber : String
    }


{-| Type for the PaymentRequestInput input object.
-}
type alias PaymentRequestInput =
    { diagnosisEffectiveHourCount : Int
    , diagnosisEffectiveCost : Data.Scalar.Decimal
    , postExamEffectiveHourCount : Int
    , postExamEffectiveCost : Data.Scalar.Decimal
    , individualEffectiveHourCount : Int
    , individualEffectiveCost : Data.Scalar.Decimal
    , collectiveEffectiveHourCount : Int
    , collectiveEffectiveCost : Data.Scalar.Decimal
    , mandatoryTrainingsEffectiveHourCount : Int
    , mandatoryTrainingsEffectiveCost : Data.Scalar.Decimal
    , basicSkillsEffectiveHourCount : Int
    , basicSkillsEffectiveCost : Data.Scalar.Decimal
    , certificateSkillsEffectiveHourCount : Int
    , certificateSkillsEffectiveCost : Data.Scalar.Decimal
    , otherTrainingEffectiveHourCount : Int
    , otherTrainingEffectiveCost : Data.Scalar.Decimal
    , examEffectiveHourCount : Int
    , examEffectiveCost : Data.Scalar.Decimal
    , invoiceNumber : String
    }


{-| Encode a PaymentRequestInput into a value that can be used as an argument.
-}
encodePaymentRequestInput : PaymentRequestInput -> Value
encodePaymentRequestInput input____ =
    Encode.maybeObject
        [ ( "diagnosisEffectiveHourCount", Encode.int input____.diagnosisEffectiveHourCount |> Just ), ( "diagnosisEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.diagnosisEffectiveCost |> Just ), ( "postExamEffectiveHourCount", Encode.int input____.postExamEffectiveHourCount |> Just ), ( "postExamEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.postExamEffectiveCost |> Just ), ( "individualEffectiveHourCount", Encode.int input____.individualEffectiveHourCount |> Just ), ( "individualEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.individualEffectiveCost |> Just ), ( "collectiveEffectiveHourCount", Encode.int input____.collectiveEffectiveHourCount |> Just ), ( "collectiveEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.collectiveEffectiveCost |> Just ), ( "mandatoryTrainingsEffectiveHourCount", Encode.int input____.mandatoryTrainingsEffectiveHourCount |> Just ), ( "mandatoryTrainingsEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.mandatoryTrainingsEffectiveCost |> Just ), ( "basicSkillsEffectiveHourCount", Encode.int input____.basicSkillsEffectiveHourCount |> Just ), ( "basicSkillsEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.basicSkillsEffectiveCost |> Just ), ( "certificateSkillsEffectiveHourCount", Encode.int input____.certificateSkillsEffectiveHourCount |> Just ), ( "certificateSkillsEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.certificateSkillsEffectiveCost |> Just ), ( "otherTrainingEffectiveHourCount", Encode.int input____.otherTrainingEffectiveHourCount |> Just ), ( "otherTrainingEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.otherTrainingEffectiveCost |> Just ), ( "examEffectiveHourCount", Encode.int input____.examEffectiveHourCount |> Just ), ( "examEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.examEffectiveCost |> Just ), ( "invoiceNumber", Encode.string input____.invoiceNumber |> Just ) ]


buildPaymentRequestUnifvaeInput :
    PaymentRequestUnifvaeInputRequiredFields
    -> PaymentRequestUnifvaeInput
buildPaymentRequestUnifvaeInput required____ =
    { individualEffectiveHourCount = required____.individualEffectiveHourCount, individualEffectiveCost = required____.individualEffectiveCost, collectiveEffectiveHourCount = required____.collectiveEffectiveHourCount, collectiveEffectiveCost = required____.collectiveEffectiveCost, mandatoryTrainingsEffectiveHourCount = required____.mandatoryTrainingsEffectiveHourCount, mandatoryTrainingsEffectiveCost = required____.mandatoryTrainingsEffectiveCost, basicSkillsEffectiveHourCount = required____.basicSkillsEffectiveHourCount, basicSkillsEffectiveCost = required____.basicSkillsEffectiveCost, certificateSkillsEffectiveHourCount = required____.certificateSkillsEffectiveHourCount, certificateSkillsEffectiveCost = required____.certificateSkillsEffectiveCost, otherTrainingEffectiveHourCount = required____.otherTrainingEffectiveHourCount, otherTrainingEffectiveCost = required____.otherTrainingEffectiveCost, invoiceNumber = required____.invoiceNumber }


type alias PaymentRequestUnifvaeInputRequiredFields =
    { individualEffectiveHourCount : Data.Scalar.Decimal
    , individualEffectiveCost : Data.Scalar.Decimal
    , collectiveEffectiveHourCount : Data.Scalar.Decimal
    , collectiveEffectiveCost : Data.Scalar.Decimal
    , mandatoryTrainingsEffectiveHourCount : Data.Scalar.Decimal
    , mandatoryTrainingsEffectiveCost : Data.Scalar.Decimal
    , basicSkillsEffectiveHourCount : Data.Scalar.Decimal
    , basicSkillsEffectiveCost : Data.Scalar.Decimal
    , certificateSkillsEffectiveHourCount : Data.Scalar.Decimal
    , certificateSkillsEffectiveCost : Data.Scalar.Decimal
    , otherTrainingEffectiveHourCount : Data.Scalar.Decimal
    , otherTrainingEffectiveCost : Data.Scalar.Decimal
    , invoiceNumber : String
    }


{-| Type for the PaymentRequestUnifvaeInput input object.
-}
type alias PaymentRequestUnifvaeInput =
    { individualEffectiveHourCount : Data.Scalar.Decimal
    , individualEffectiveCost : Data.Scalar.Decimal
    , collectiveEffectiveHourCount : Data.Scalar.Decimal
    , collectiveEffectiveCost : Data.Scalar.Decimal
    , mandatoryTrainingsEffectiveHourCount : Data.Scalar.Decimal
    , mandatoryTrainingsEffectiveCost : Data.Scalar.Decimal
    , basicSkillsEffectiveHourCount : Data.Scalar.Decimal
    , basicSkillsEffectiveCost : Data.Scalar.Decimal
    , certificateSkillsEffectiveHourCount : Data.Scalar.Decimal
    , certificateSkillsEffectiveCost : Data.Scalar.Decimal
    , otherTrainingEffectiveHourCount : Data.Scalar.Decimal
    , otherTrainingEffectiveCost : Data.Scalar.Decimal
    , invoiceNumber : String
    }


{-| Encode a PaymentRequestUnifvaeInput into a value that can be used as an argument.
-}
encodePaymentRequestUnifvaeInput : PaymentRequestUnifvaeInput -> Value
encodePaymentRequestUnifvaeInput input____ =
    Encode.maybeObject
        [ ( "individualEffectiveHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.individualEffectiveHourCount |> Just ), ( "individualEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.individualEffectiveCost |> Just ), ( "collectiveEffectiveHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.collectiveEffectiveHourCount |> Just ), ( "collectiveEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.collectiveEffectiveCost |> Just ), ( "mandatoryTrainingsEffectiveHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.mandatoryTrainingsEffectiveHourCount |> Just ), ( "mandatoryTrainingsEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.mandatoryTrainingsEffectiveCost |> Just ), ( "basicSkillsEffectiveHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.basicSkillsEffectiveHourCount |> Just ), ( "basicSkillsEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.basicSkillsEffectiveCost |> Just ), ( "certificateSkillsEffectiveHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.certificateSkillsEffectiveHourCount |> Just ), ( "certificateSkillsEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.certificateSkillsEffectiveCost |> Just ), ( "otherTrainingEffectiveHourCount", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.otherTrainingEffectiveHourCount |> Just ), ( "otherTrainingEffectiveCost", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecDecimal) input____.otherTrainingEffectiveCost |> Just ), ( "invoiceNumber", Encode.string input____.invoiceNumber |> Just ) ]


buildSearchOrganismFilter :
    (SearchOrganismFilterOptionalFields -> SearchOrganismFilterOptionalFields)
    -> SearchOrganismFilter
buildSearchOrganismFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { distanceStatus = Absent, pmr = Absent, zip = Absent }
    in
    { distanceStatus = optionals____.distanceStatus, pmr = optionals____.pmr, zip = optionals____.zip }


type alias SearchOrganismFilterOptionalFields =
    { distanceStatus : OptionalArgument Admin.Enum.DistanceStatus.DistanceStatus
    , pmr : OptionalArgument Bool
    , zip : OptionalArgument String
    }


{-| Type for the SearchOrganismFilter input object.
-}
type alias SearchOrganismFilter =
    { distanceStatus : OptionalArgument Admin.Enum.DistanceStatus.DistanceStatus
    , pmr : OptionalArgument Bool
    , zip : OptionalArgument String
    }


{-| Encode a SearchOrganismFilter into a value that can be used as an argument.
-}
encodeSearchOrganismFilter : SearchOrganismFilter -> Value
encodeSearchOrganismFilter input____ =
    Encode.maybeObject
        [ ( "distanceStatus", Encode.enum Admin.Enum.DistanceStatus.toString |> Encode.optional input____.distanceStatus ), ( "pmr", Encode.bool |> Encode.optional input____.pmr ), ( "zip", Encode.string |> Encode.optional input____.zip ) ]


buildSubscriptionRequestInput :
    SubscriptionRequestInputRequiredFields
    -> (SubscriptionRequestInputOptionalFields -> SubscriptionRequestInputOptionalFields)
    -> SubscriptionRequestInput
buildSubscriptionRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { domaineIds = Absent, ccnIds = Absent, companyWebsite = Absent }
    in
    { companySiret = required____.companySiret, companyLegalStatus = required____.companyLegalStatus, companyName = required____.companyName, companyAddress = required____.companyAddress, companyZipCode = required____.companyZipCode, companyCity = required____.companyCity, accountFirstname = required____.accountFirstname, accountLastname = required____.accountLastname, accountEmail = required____.accountEmail, accountPhoneNumber = required____.accountPhoneNumber, typology = required____.typology, domaineIds = optionals____.domaineIds, ccnIds = optionals____.ccnIds, onSiteDepartmentsIds = required____.onSiteDepartmentsIds, remoteDepartmentsIds = required____.remoteDepartmentsIds, companyWebsite = optionals____.companyWebsite, qualiopiCertificateExpiresAt = required____.qualiopiCertificateExpiresAt }


type alias SubscriptionRequestInputRequiredFields =
    { companySiret : String
    , companyLegalStatus : Admin.Enum.LegalStatus.LegalStatus
    , companyName : String
    , companyAddress : String
    , companyZipCode : String
    , companyCity : String
    , accountFirstname : String
    , accountLastname : String
    , accountEmail : String
    , accountPhoneNumber : String
    , typology : Admin.Enum.SubscriptionOrganismTypology.SubscriptionOrganismTypology
    , onSiteDepartmentsIds : List Data.Scalar.Id
    , remoteDepartmentsIds : List Data.Scalar.Id
    , qualiopiCertificateExpiresAt : Data.Scalar.Timestamp
    }


type alias SubscriptionRequestInputOptionalFields =
    { domaineIds : OptionalArgument (List String)
    , ccnIds : OptionalArgument (List String)
    , companyWebsite : OptionalArgument String
    }


{-| Type for the SubscriptionRequestInput input object.
-}
type alias SubscriptionRequestInput =
    { companySiret : String
    , companyLegalStatus : Admin.Enum.LegalStatus.LegalStatus
    , companyName : String
    , companyAddress : String
    , companyZipCode : String
    , companyCity : String
    , accountFirstname : String
    , accountLastname : String
    , accountEmail : String
    , accountPhoneNumber : String
    , typology : Admin.Enum.SubscriptionOrganismTypology.SubscriptionOrganismTypology
    , domaineIds : OptionalArgument (List String)
    , ccnIds : OptionalArgument (List String)
    , onSiteDepartmentsIds : List Data.Scalar.Id
    , remoteDepartmentsIds : List Data.Scalar.Id
    , companyWebsite : OptionalArgument String
    , qualiopiCertificateExpiresAt : Data.Scalar.Timestamp
    }


{-| Encode a SubscriptionRequestInput into a value that can be used as an argument.
-}
encodeSubscriptionRequestInput : SubscriptionRequestInput -> Value
encodeSubscriptionRequestInput input____ =
    Encode.maybeObject
        [ ( "companySiret", Encode.string input____.companySiret |> Just ), ( "companyLegalStatus", Encode.enum Admin.Enum.LegalStatus.toString input____.companyLegalStatus |> Just ), ( "companyName", Encode.string input____.companyName |> Just ), ( "companyAddress", Encode.string input____.companyAddress |> Just ), ( "companyZipCode", Encode.string input____.companyZipCode |> Just ), ( "companyCity", Encode.string input____.companyCity |> Just ), ( "accountFirstname", Encode.string input____.accountFirstname |> Just ), ( "accountLastname", Encode.string input____.accountLastname |> Just ), ( "accountEmail", Encode.string input____.accountEmail |> Just ), ( "accountPhoneNumber", Encode.string input____.accountPhoneNumber |> Just ), ( "typology", Encode.enum Admin.Enum.SubscriptionOrganismTypology.toString input____.typology |> Just ), ( "domaineIds", (Encode.string |> Encode.list) |> Encode.optional input____.domaineIds ), ( "ccnIds", (Encode.string |> Encode.list) |> Encode.optional input____.ccnIds ), ( "onSiteDepartmentsIds", ((Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.onSiteDepartmentsIds |> Just ), ( "remoteDepartmentsIds", ((Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.remoteDepartmentsIds |> Just ), ( "companyWebsite", Encode.string |> Encode.optional input____.companyWebsite ), ( "qualiopiCertificateExpiresAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) input____.qualiopiCertificateExpiresAt |> Just ) ]


buildSubscriptionRequestOrderByInput :
    (SubscriptionRequestOrderByInputOptionalFields -> SubscriptionRequestOrderByInputOptionalFields)
    -> SubscriptionRequestOrderByInput
buildSubscriptionRequestOrderByInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { companyName = Absent, accountLastname = Absent, createdAt = Absent }
    in
    { companyName = optionals____.companyName, accountLastname = optionals____.accountLastname, createdAt = optionals____.createdAt }


type alias SubscriptionRequestOrderByInputOptionalFields =
    { companyName : OptionalArgument Admin.Enum.Sort.Sort
    , accountLastname : OptionalArgument Admin.Enum.Sort.Sort
    , createdAt : OptionalArgument Admin.Enum.Sort.Sort
    }


{-| Type for the SubscriptionRequestOrderByInput input object.
-}
type alias SubscriptionRequestOrderByInput =
    { companyName : OptionalArgument Admin.Enum.Sort.Sort
    , accountLastname : OptionalArgument Admin.Enum.Sort.Sort
    , createdAt : OptionalArgument Admin.Enum.Sort.Sort
    }


{-| Encode a SubscriptionRequestOrderByInput into a value that can be used as an argument.
-}
encodeSubscriptionRequestOrderByInput : SubscriptionRequestOrderByInput -> Value
encodeSubscriptionRequestOrderByInput input____ =
    Encode.maybeObject
        [ ( "companyName", Encode.enum Admin.Enum.Sort.toString |> Encode.optional input____.companyName ), ( "accountLastname", Encode.enum Admin.Enum.Sort.toString |> Encode.optional input____.accountLastname ), ( "createdAt", Encode.enum Admin.Enum.Sort.toString |> Encode.optional input____.createdAt ) ]


buildTrainingInput :
    TrainingInputRequiredFields
    -> TrainingInput
buildTrainingInput required____ =
    { certificateSkills = required____.certificateSkills, otherTraining = required____.otherTraining, individualHourCount = required____.individualHourCount, collectiveHourCount = required____.collectiveHourCount, additionalHourCount = required____.additionalHourCount, basicSkillIds = required____.basicSkillIds, mandatoryTrainingIds = required____.mandatoryTrainingIds, isCertificationPartial = required____.isCertificationPartial }


type alias TrainingInputRequiredFields =
    { certificateSkills : String
    , otherTraining : String
    , individualHourCount : Int
    , collectiveHourCount : Int
    , additionalHourCount : Int
    , basicSkillIds : List Data.Scalar.Uuid
    , mandatoryTrainingIds : List Data.Scalar.Uuid
    , isCertificationPartial : Bool
    }


{-| Type for the TrainingInput input object.
-}
type alias TrainingInput =
    { certificateSkills : String
    , otherTraining : String
    , individualHourCount : Int
    , collectiveHourCount : Int
    , additionalHourCount : Int
    , basicSkillIds : List Data.Scalar.Uuid
    , mandatoryTrainingIds : List Data.Scalar.Uuid
    , isCertificationPartial : Bool
    }


{-| Encode a TrainingInput into a value that can be used as an argument.
-}
encodeTrainingInput : TrainingInput -> Value
encodeTrainingInput input____ =
    Encode.maybeObject
        [ ( "certificateSkills", Encode.string input____.certificateSkills |> Just ), ( "otherTraining", Encode.string input____.otherTraining |> Just ), ( "individualHourCount", Encode.int input____.individualHourCount |> Just ), ( "collectiveHourCount", Encode.int input____.collectiveHourCount |> Just ), ( "additionalHourCount", Encode.int input____.additionalHourCount |> Just ), ( "basicSkillIds", ((Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.basicSkillIds |> Just ), ( "mandatoryTrainingIds", ((Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.mandatoryTrainingIds |> Just ), ( "isCertificationPartial", Encode.bool input____.isCertificationPartial |> Just ) ]


buildUpdateAccountInput :
    UpdateAccountInputRequiredFields
    -> (UpdateAccountInputOptionalFields -> UpdateAccountInputOptionalFields)
    -> UpdateAccountInput
buildUpdateAccountInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { firstname = Absent, lastname = Absent }
    in
    { email = required____.email, firstname = optionals____.firstname, lastname = optionals____.lastname }


type alias UpdateAccountInputRequiredFields =
    { email : String }


type alias UpdateAccountInputOptionalFields =
    { firstname : OptionalArgument String
    , lastname : OptionalArgument String
    }


{-| Type for the UpdateAccountInput input object.
-}
type alias UpdateAccountInput =
    { email : String
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    }


{-| Encode a UpdateAccountInput into a value that can be used as an argument.
-}
encodeUpdateAccountInput : UpdateAccountInput -> Value
encodeUpdateAccountInput input____ =
    Encode.maybeObject
        [ ( "email", Encode.string input____.email |> Just ), ( "firstname", Encode.string |> Encode.optional input____.firstname ), ( "lastname", Encode.string |> Encode.optional input____.lastname ) ]


buildUpdateCandidateInput :
    (UpdateCandidateInputOptionalFields -> UpdateCandidateInputOptionalFields)
    -> UpdateCandidateInput
buildUpdateCandidateInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { firstname = Absent, lastname = Absent, phone = Absent, email = Absent }
    in
    { firstname = optionals____.firstname, lastname = optionals____.lastname, phone = optionals____.phone, email = optionals____.email }


type alias UpdateCandidateInputOptionalFields =
    { firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , phone : OptionalArgument String
    , email : OptionalArgument String
    }


{-| Type for the UpdateCandidateInput input object.
-}
type alias UpdateCandidateInput =
    { firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , phone : OptionalArgument String
    , email : OptionalArgument String
    }


{-| Encode a UpdateCandidateInput into a value that can be used as an argument.
-}
encodeUpdateCandidateInput : UpdateCandidateInput -> Value
encodeUpdateCandidateInput input____ =
    Encode.maybeObject
        [ ( "firstname", Encode.string |> Encode.optional input____.firstname ), ( "lastname", Encode.string |> Encode.optional input____.lastname ), ( "phone", Encode.string |> Encode.optional input____.phone ), ( "email", Encode.string |> Encode.optional input____.email ) ]


buildUpdateCertificationAuthorityDepartmentsAndCertificationsInput :
    UpdateCertificationAuthorityDepartmentsAndCertificationsInputRequiredFields
    -> UpdateCertificationAuthorityDepartmentsAndCertificationsInput
buildUpdateCertificationAuthorityDepartmentsAndCertificationsInput required____ =
    { certificationAuthorityId = required____.certificationAuthorityId, departmentIds = required____.departmentIds, certificationIds = required____.certificationIds }


type alias UpdateCertificationAuthorityDepartmentsAndCertificationsInputRequiredFields =
    { certificationAuthorityId : String
    , departmentIds : List String
    , certificationIds : List String
    }


{-| Type for the UpdateCertificationAuthorityDepartmentsAndCertificationsInput input object.
-}
type alias UpdateCertificationAuthorityDepartmentsAndCertificationsInput =
    { certificationAuthorityId : String
    , departmentIds : List String
    , certificationIds : List String
    }


{-| Encode a UpdateCertificationAuthorityDepartmentsAndCertificationsInput into a value that can be used as an argument.
-}
encodeUpdateCertificationAuthorityDepartmentsAndCertificationsInput : UpdateCertificationAuthorityDepartmentsAndCertificationsInput -> Value
encodeUpdateCertificationAuthorityDepartmentsAndCertificationsInput input____ =
    Encode.maybeObject
        [ ( "certificationAuthorityId", Encode.string input____.certificationAuthorityId |> Just ), ( "departmentIds", (Encode.string |> Encode.list) input____.departmentIds |> Just ), ( "certificationIds", (Encode.string |> Encode.list) input____.certificationIds |> Just ) ]


buildUpdateCertificationAuthorityInput :
    UpdateCertificationAuthorityInputRequiredFields
    -> (UpdateCertificationAuthorityInputOptionalFields -> UpdateCertificationAuthorityInputOptionalFields)
    -> UpdateCertificationAuthorityInput
buildUpdateCertificationAuthorityInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { contactFullName = Absent, contactEmail = Absent }
    in
    { label = required____.label, contactFullName = optionals____.contactFullName, contactEmail = optionals____.contactEmail }


type alias UpdateCertificationAuthorityInputRequiredFields =
    { label : String }


type alias UpdateCertificationAuthorityInputOptionalFields =
    { contactFullName : OptionalArgument String
    , contactEmail : OptionalArgument String
    }


{-| Type for the UpdateCertificationAuthorityInput input object.
-}
type alias UpdateCertificationAuthorityInput =
    { label : String
    , contactFullName : OptionalArgument String
    , contactEmail : OptionalArgument String
    }


{-| Encode a UpdateCertificationAuthorityInput into a value that can be used as an argument.
-}
encodeUpdateCertificationAuthorityInput : UpdateCertificationAuthorityInput -> Value
encodeUpdateCertificationAuthorityInput input____ =
    Encode.maybeObject
        [ ( "label", Encode.string input____.label |> Just ), ( "contactFullName", Encode.string |> Encode.optional input____.contactFullName ), ( "contactEmail", Encode.string |> Encode.optional input____.contactEmail ) ]


buildUpdateCertificationAuthorityLocalAccountInput :
    UpdateCertificationAuthorityLocalAccountInputRequiredFields
    -> UpdateCertificationAuthorityLocalAccountInput
buildUpdateCertificationAuthorityLocalAccountInput required____ =
    { certificationAuthorityLocalAccountId = required____.certificationAuthorityLocalAccountId, departmentIds = required____.departmentIds, certificationIds = required____.certificationIds }


type alias UpdateCertificationAuthorityLocalAccountInputRequiredFields =
    { certificationAuthorityLocalAccountId : String
    , departmentIds : List String
    , certificationIds : List String
    }


{-| Type for the UpdateCertificationAuthorityLocalAccountInput input object.
-}
type alias UpdateCertificationAuthorityLocalAccountInput =
    { certificationAuthorityLocalAccountId : String
    , departmentIds : List String
    , certificationIds : List String
    }


{-| Encode a UpdateCertificationAuthorityLocalAccountInput into a value that can be used as an argument.
-}
encodeUpdateCertificationAuthorityLocalAccountInput : UpdateCertificationAuthorityLocalAccountInput -> Value
encodeUpdateCertificationAuthorityLocalAccountInput input____ =
    Encode.maybeObject
        [ ( "certificationAuthorityLocalAccountId", Encode.string input____.certificationAuthorityLocalAccountId |> Just ), ( "departmentIds", (Encode.string |> Encode.list) input____.departmentIds |> Just ), ( "certificationIds", (Encode.string |> Encode.list) input____.certificationIds |> Just ) ]


buildUpdateCertificationInput :
    UpdateCertificationInputRequiredFields
    -> UpdateCertificationInput
buildUpdateCertificationInput required____ =
    { certificationId = required____.certificationId, label = required____.label, level = required____.level, codeRncp = required____.codeRncp, typeDiplomeId = required____.typeDiplomeId, certificationAuthorityTag = required____.certificationAuthorityTag, domaineIds = required____.domaineIds, conventionCollectiveIds = required____.conventionCollectiveIds, availableAt = required____.availableAt, expiresAt = required____.expiresAt }


type alias UpdateCertificationInputRequiredFields =
    { certificationId : Data.Scalar.Id
    , label : String
    , level : Int
    , codeRncp : String
    , typeDiplomeId : String
    , certificationAuthorityTag : String
    , domaineIds : List String
    , conventionCollectiveIds : List String
    , availableAt : Data.Scalar.Timestamp
    , expiresAt : Data.Scalar.Timestamp
    }


{-| Type for the UpdateCertificationInput input object.
-}
type alias UpdateCertificationInput =
    { certificationId : Data.Scalar.Id
    , label : String
    , level : Int
    , codeRncp : String
    , typeDiplomeId : String
    , certificationAuthorityTag : String
    , domaineIds : List String
    , conventionCollectiveIds : List String
    , availableAt : Data.Scalar.Timestamp
    , expiresAt : Data.Scalar.Timestamp
    }


{-| Encode a UpdateCertificationInput into a value that can be used as an argument.
-}
encodeUpdateCertificationInput : UpdateCertificationInput -> Value
encodeUpdateCertificationInput input____ =
    Encode.maybeObject
        [ ( "certificationId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.certificationId |> Just ), ( "label", Encode.string input____.label |> Just ), ( "level", Encode.int input____.level |> Just ), ( "codeRncp", Encode.string input____.codeRncp |> Just ), ( "typeDiplomeId", Encode.string input____.typeDiplomeId |> Just ), ( "certificationAuthorityTag", Encode.string input____.certificationAuthorityTag |> Just ), ( "domaineIds", (Encode.string |> Encode.list) input____.domaineIds |> Just ), ( "conventionCollectiveIds", (Encode.string |> Encode.list) input____.conventionCollectiveIds |> Just ), ( "availableAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) input____.availableAt |> Just ), ( "expiresAt", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecTimestamp) input____.expiresAt |> Just ) ]


buildUpdateCompetenceBlocsInput :
    UpdateCompetenceBlocsInputRequiredFields
    -> UpdateCompetenceBlocsInput
buildUpdateCompetenceBlocsInput required____ =
    { certificationId = required____.certificationId, blocs = required____.blocs }


type alias UpdateCompetenceBlocsInputRequiredFields =
    { certificationId : Data.Scalar.Id
    , blocs : List CompetenceBlocInput
    }


{-| Type for the UpdateCompetenceBlocsInput input object.
-}
type alias UpdateCompetenceBlocsInput =
    { certificationId : Data.Scalar.Id
    , blocs : List CompetenceBlocInput
    }


{-| Encode a UpdateCompetenceBlocsInput into a value that can be used as an argument.
-}
encodeUpdateCompetenceBlocsInput : UpdateCompetenceBlocsInput -> Value
encodeUpdateCompetenceBlocsInput input____ =
    Encode.maybeObject
        [ ( "certificationId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.certificationId |> Just ), ( "blocs", (encodeCompetenceBlocInput |> Encode.list) input____.blocs |> Just ) ]


buildUpdateMaisonMereAAPInput :
    UpdateMaisonMereAAPInputRequiredFields
    -> UpdateMaisonMereAAPInput
buildUpdateMaisonMereAAPInput required____ =
    { zoneIntervention = required____.zoneIntervention }


type alias UpdateMaisonMereAAPInputRequiredFields =
    { zoneIntervention : List MaisonMereAAPOnDepartmentInput }


{-| Type for the UpdateMaisonMereAAPInput input object.
-}
type alias UpdateMaisonMereAAPInput =
    { zoneIntervention : List MaisonMereAAPOnDepartmentInput }


{-| Encode a UpdateMaisonMereAAPInput into a value that can be used as an argument.
-}
encodeUpdateMaisonMereAAPInput : UpdateMaisonMereAAPInput -> Value
encodeUpdateMaisonMereAAPInput input____ =
    Encode.maybeObject
        [ ( "zoneIntervention", (encodeMaisonMereAAPOnDepartmentInput |> Encode.list) input____.zoneIntervention |> Just ) ]


buildUpdateOrganismAccountInput :
    UpdateOrganismAccountInputRequiredFields
    -> UpdateOrganismAccountInput
buildUpdateOrganismAccountInput required____ =
    { organismId = required____.organismId, accountFirstname = required____.accountFirstname, accountLastname = required____.accountLastname, accountEmail = required____.accountEmail }


type alias UpdateOrganismAccountInputRequiredFields =
    { organismId : Data.Scalar.Id
    , accountFirstname : String
    , accountLastname : String
    , accountEmail : String
    }


{-| Type for the UpdateOrganismAccountInput input object.
-}
type alias UpdateOrganismAccountInput =
    { organismId : Data.Scalar.Id
    , accountFirstname : String
    , accountLastname : String
    , accountEmail : String
    }


{-| Encode a UpdateOrganismAccountInput into a value that can be used as an argument.
-}
encodeUpdateOrganismAccountInput : UpdateOrganismAccountInput -> Value
encodeUpdateOrganismAccountInput input____ =
    Encode.maybeObject
        [ ( "organismId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.organismId |> Just ), ( "accountFirstname", Encode.string input____.accountFirstname |> Just ), ( "accountLastname", Encode.string input____.accountLastname |> Just ), ( "accountEmail", Encode.string input____.accountEmail |> Just ) ]


buildUpdateOrganismInput :
    UpdateOrganismInputRequiredFields
    -> (UpdateOrganismInputOptionalFields -> UpdateOrganismInputOptionalFields)
    -> UpdateOrganismInput
buildUpdateOrganismInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { contactAdministrativePhone = Absent, website = Absent }
    in
    { label = required____.label, contactAdministrativeEmail = required____.contactAdministrativeEmail, contactAdministrativePhone = optionals____.contactAdministrativePhone, website = optionals____.website, isActive = required____.isActive }


type alias UpdateOrganismInputRequiredFields =
    { label : String
    , contactAdministrativeEmail : String
    , isActive : Bool
    }


type alias UpdateOrganismInputOptionalFields =
    { contactAdministrativePhone : OptionalArgument String
    , website : OptionalArgument String
    }


{-| Type for the UpdateOrganismInput input object.
-}
type alias UpdateOrganismInput =
    { label : String
    , contactAdministrativeEmail : String
    , contactAdministrativePhone : OptionalArgument String
    , website : OptionalArgument String
    , isActive : Bool
    }


{-| Encode a UpdateOrganismInput into a value that can be used as an argument.
-}
encodeUpdateOrganismInput : UpdateOrganismInput -> Value
encodeUpdateOrganismInput input____ =
    Encode.maybeObject
        [ ( "label", Encode.string input____.label |> Just ), ( "contactAdministrativeEmail", Encode.string input____.contactAdministrativeEmail |> Just ), ( "contactAdministrativePhone", Encode.string |> Encode.optional input____.contactAdministrativePhone ), ( "website", Encode.string |> Encode.optional input____.website ), ( "isActive", Encode.bool input____.isActive |> Just ) ]


buildUpdateOrganismInterventionZoneInput :
    UpdateOrganismInterventionZoneInputRequiredFields
    -> UpdateOrganismInterventionZoneInput
buildUpdateOrganismInterventionZoneInput required____ =
    { organismId = required____.organismId, interventionZone = required____.interventionZone }


type alias UpdateOrganismInterventionZoneInputRequiredFields =
    { organismId : Data.Scalar.Id
    , interventionZone : List InterventionZoneInput
    }


{-| Type for the UpdateOrganismInterventionZoneInput input object.
-}
type alias UpdateOrganismInterventionZoneInput =
    { organismId : Data.Scalar.Id
    , interventionZone : List InterventionZoneInput
    }


{-| Encode a UpdateOrganismInterventionZoneInput into a value that can be used as an argument.
-}
encodeUpdateOrganismInterventionZoneInput : UpdateOrganismInterventionZoneInput -> Value
encodeUpdateOrganismInterventionZoneInput input____ =
    Encode.maybeObject
        [ ( "organismId", (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.organismId |> Just ), ( "interventionZone", (encodeInterventionZoneInput |> Encode.list) input____.interventionZone |> Just ) ]
