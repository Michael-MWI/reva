-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.FinanceModule exposing (..)

import Json.Decode as Decode exposing (Decoder)


type FinanceModule
    = Unireva
    | Unifvae
    | Hors_plateforme


list : List FinanceModule
list =
    [ Unireva, Unifvae, Hors_plateforme ]


decoder : Decoder FinanceModule
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "unireva" ->
                        Decode.succeed Unireva

                    "unifvae" ->
                        Decode.succeed Unifvae

                    "hors_plateforme" ->
                        Decode.succeed Hors_plateforme

                    _ ->
                        Decode.fail ("Invalid FinanceModule type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : FinanceModule -> String
toString enum____ =
    case enum____ of
        Unireva ->
            "unireva"

        Unifvae ->
            "unifvae"

        Hors_plateforme ->
            "hors_plateforme"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe FinanceModule
fromString enumString____ =
    case enumString____ of
        "unireva" ->
            Just Unireva

        "unifvae" ->
            Just Unifvae

        "hors_plateforme" ->
            Just Hors_plateforme

        _ ->
            Nothing
