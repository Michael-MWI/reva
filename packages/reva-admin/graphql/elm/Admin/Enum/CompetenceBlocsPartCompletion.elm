-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.CompetenceBlocsPartCompletion exposing (..)

import Json.Decode as Decode exposing (Decoder)


type CompetenceBlocsPartCompletion
    = ToComplete
    | Completed
    | InProgress


list : List CompetenceBlocsPartCompletion
list =
    [ ToComplete, Completed, InProgress ]


decoder : Decoder CompetenceBlocsPartCompletion
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "TO_COMPLETE" ->
                        Decode.succeed ToComplete

                    "COMPLETED" ->
                        Decode.succeed Completed

                    "IN_PROGRESS" ->
                        Decode.succeed InProgress

                    _ ->
                        Decode.fail ("Invalid CompetenceBlocsPartCompletion type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CompetenceBlocsPartCompletion -> String
toString enum____ =
    case enum____ of
        ToComplete ->
            "TO_COMPLETE"

        Completed ->
            "COMPLETED"

        InProgress ->
            "IN_PROGRESS"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CompetenceBlocsPartCompletion
fromString enumString____ =
    case enumString____ of
        "TO_COMPLETE" ->
            Just ToComplete

        "COMPLETED" ->
            Just Completed

        "IN_PROGRESS" ->
            Just InProgress

        _ ->
            Nothing
