-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.PersonneType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type PersonneType
    = PersonnePhysique
    | PersonneMorale


list : List PersonneType
list =
    [ PersonnePhysique, PersonneMorale ]


decoder : Decoder PersonneType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "PERSONNE_PHYSIQUE" ->
                        Decode.succeed PersonnePhysique

                    "PERSONNE_MORALE" ->
                        Decode.succeed PersonneMorale

                    _ ->
                        Decode.fail ("Invalid PersonneType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PersonneType -> String
toString enum____ =
    case enum____ of
        PersonnePhysique ->
            "PERSONNE_PHYSIQUE"

        PersonneMorale ->
            "PERSONNE_MORALE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PersonneType
fromString enumString____ =
    case enumString____ of
        "PERSONNE_PHYSIQUE" ->
            Just PersonnePhysique

        "PERSONNE_MORALE" ->
            Just PersonneMorale

        _ ->
            Nothing
