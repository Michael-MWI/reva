-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.OrganismTypology exposing (..)

import Json.Decode as Decode exposing (Decoder)


type OrganismTypology
    = Experimentation
    | ExpertFiliere
    | ExpertBranche
    | ExpertBrancheEtFiliere


list : List OrganismTypology
list =
    [ Experimentation, ExpertFiliere, ExpertBranche, ExpertBrancheEtFiliere ]


decoder : Decoder OrganismTypology
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "experimentation" ->
                        Decode.succeed Experimentation

                    "expertFiliere" ->
                        Decode.succeed ExpertFiliere

                    "expertBranche" ->
                        Decode.succeed ExpertBranche

                    "expertBrancheEtFiliere" ->
                        Decode.succeed ExpertBrancheEtFiliere

                    _ ->
                        Decode.fail ("Invalid OrganismTypology type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : OrganismTypology -> String
toString enum____ =
    case enum____ of
        Experimentation ->
            "experimentation"

        ExpertFiliere ->
            "expertFiliere"

        ExpertBranche ->
            "expertBranche"

        ExpertBrancheEtFiliere ->
            "expertBrancheEtFiliere"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe OrganismTypology
fromString enumString____ =
    case enumString____ of
        "experimentation" ->
            Just Experimentation

        "expertFiliere" ->
            Just ExpertFiliere

        "expertBranche" ->
            Just ExpertBranche

        "expertBrancheEtFiliere" ->
            Just ExpertBrancheEtFiliere

        _ ->
            Nothing
