-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.MaisonMereAAPLegalInformationDocumentsDecisionEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


type MaisonMereAAPLegalInformationDocumentsDecisionEnum
    = Valide
    | DemandeDePrecision


list : List MaisonMereAAPLegalInformationDocumentsDecisionEnum
list =
    [ Valide, DemandeDePrecision ]


decoder : Decoder MaisonMereAAPLegalInformationDocumentsDecisionEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "VALIDE" ->
                        Decode.succeed Valide

                    "DEMANDE_DE_PRECISION" ->
                        Decode.succeed DemandeDePrecision

                    _ ->
                        Decode.fail ("Invalid MaisonMereAAPLegalInformationDocumentsDecisionEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MaisonMereAAPLegalInformationDocumentsDecisionEnum -> String
toString enum____ =
    case enum____ of
        Valide ->
            "VALIDE"

        DemandeDePrecision ->
            "DEMANDE_DE_PRECISION"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MaisonMereAAPLegalInformationDocumentsDecisionEnum
fromString enumString____ =
    case enumString____ of
        "VALIDE" ->
            Just Valide

        "DEMANDE_DE_PRECISION" ->
            Just DemandeDePrecision

        _ ->
            Nothing
