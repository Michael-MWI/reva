-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.JuryResult exposing (..)

import Json.Decode as Decode exposing (Decoder)


type JuryResult
    = FullSuccessOfFullCertification
    | PartialSuccessOfFullCertification
    | FullSuccessOfPartialCertification
    | PartialSuccessOfPartialCertification
    | Failure
    | CandidateExcused
    | CandidateAbsent


list : List JuryResult
list =
    [ FullSuccessOfFullCertification, PartialSuccessOfFullCertification, FullSuccessOfPartialCertification, PartialSuccessOfPartialCertification, Failure, CandidateExcused, CandidateAbsent ]


decoder : Decoder JuryResult
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "FULL_SUCCESS_OF_FULL_CERTIFICATION" ->
                        Decode.succeed FullSuccessOfFullCertification

                    "PARTIAL_SUCCESS_OF_FULL_CERTIFICATION" ->
                        Decode.succeed PartialSuccessOfFullCertification

                    "FULL_SUCCESS_OF_PARTIAL_CERTIFICATION" ->
                        Decode.succeed FullSuccessOfPartialCertification

                    "PARTIAL_SUCCESS_OF_PARTIAL_CERTIFICATION" ->
                        Decode.succeed PartialSuccessOfPartialCertification

                    "FAILURE" ->
                        Decode.succeed Failure

                    "CANDIDATE_EXCUSED" ->
                        Decode.succeed CandidateExcused

                    "CANDIDATE_ABSENT" ->
                        Decode.succeed CandidateAbsent

                    _ ->
                        Decode.fail ("Invalid JuryResult type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : JuryResult -> String
toString enum____ =
    case enum____ of
        FullSuccessOfFullCertification ->
            "FULL_SUCCESS_OF_FULL_CERTIFICATION"

        PartialSuccessOfFullCertification ->
            "PARTIAL_SUCCESS_OF_FULL_CERTIFICATION"

        FullSuccessOfPartialCertification ->
            "FULL_SUCCESS_OF_PARTIAL_CERTIFICATION"

        PartialSuccessOfPartialCertification ->
            "PARTIAL_SUCCESS_OF_PARTIAL_CERTIFICATION"

        Failure ->
            "FAILURE"

        CandidateExcused ->
            "CANDIDATE_EXCUSED"

        CandidateAbsent ->
            "CANDIDATE_ABSENT"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe JuryResult
fromString enumString____ =
    case enumString____ of
        "FULL_SUCCESS_OF_FULL_CERTIFICATION" ->
            Just FullSuccessOfFullCertification

        "PARTIAL_SUCCESS_OF_FULL_CERTIFICATION" ->
            Just PartialSuccessOfFullCertification

        "FULL_SUCCESS_OF_PARTIAL_CERTIFICATION" ->
            Just FullSuccessOfPartialCertification

        "PARTIAL_SUCCESS_OF_PARTIAL_CERTIFICATION" ->
            Just PartialSuccessOfPartialCertification

        "FAILURE" ->
            Just Failure

        "CANDIDATE_EXCUSED" ->
            Just CandidateExcused

        "CANDIDATE_ABSENT" ->
            Just CandidateAbsent

        _ ->
            Nothing
