-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.CandidateDegree exposing (..)

import Json.Decode as Decode exposing (Decoder)


type CandidateDegree
    = N1Sans
    | N2Clea
    | N3CapBep
    | N4Bac
    | N5Bac2
    | N6Bac34
    | N7Bac5
    | N8Bac8


list : List CandidateDegree
list =
    [ N1Sans, N2Clea, N3CapBep, N4Bac, N5Bac2, N6Bac34, N7Bac5, N8Bac8 ]


decoder : Decoder CandidateDegree
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "N1_SANS" ->
                        Decode.succeed N1Sans

                    "N2_CLEA" ->
                        Decode.succeed N2Clea

                    "N3_CAP_BEP" ->
                        Decode.succeed N3CapBep

                    "N4_BAC" ->
                        Decode.succeed N4Bac

                    "N5_BAC_2" ->
                        Decode.succeed N5Bac2

                    "N6_BAC_3_4" ->
                        Decode.succeed N6Bac34

                    "N7_BAC_5" ->
                        Decode.succeed N7Bac5

                    "N8_BAC_8" ->
                        Decode.succeed N8Bac8

                    _ ->
                        Decode.fail ("Invalid CandidateDegree type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CandidateDegree -> String
toString enum____ =
    case enum____ of
        N1Sans ->
            "N1_SANS"

        N2Clea ->
            "N2_CLEA"

        N3CapBep ->
            "N3_CAP_BEP"

        N4Bac ->
            "N4_BAC"

        N5Bac2 ->
            "N5_BAC_2"

        N6Bac34 ->
            "N6_BAC_3_4"

        N7Bac5 ->
            "N7_BAC_5"

        N8Bac8 ->
            "N8_BAC_8"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CandidateDegree
fromString enumString____ =
    case enumString____ of
        "N1_SANS" ->
            Just N1Sans

        "N2_CLEA" ->
            Just N2Clea

        "N3_CAP_BEP" ->
            Just N3CapBep

        "N4_BAC" ->
            Just N4Bac

        "N5_BAC_2" ->
            Just N5Bac2

        "N6_BAC_3_4" ->
            Just N6Bac34

        "N7_BAC_5" ->
            Just N7Bac5

        "N8_BAC_8" ->
            Just N8Bac8

        _ ->
            Nothing
