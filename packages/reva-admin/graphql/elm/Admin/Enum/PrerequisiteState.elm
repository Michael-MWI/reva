-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.PrerequisiteState exposing (..)

import Json.Decode as Decode exposing (Decoder)


type PrerequisiteState
    = Acquired
    | InProgress
    | Recommended


list : List PrerequisiteState
list =
    [ Acquired, InProgress, Recommended ]


decoder : Decoder PrerequisiteState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ACQUIRED" ->
                        Decode.succeed Acquired

                    "IN_PROGRESS" ->
                        Decode.succeed InProgress

                    "RECOMMENDED" ->
                        Decode.succeed Recommended

                    _ ->
                        Decode.fail ("Invalid PrerequisiteState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PrerequisiteState -> String
toString enum____ =
    case enum____ of
        Acquired ->
            "ACQUIRED"

        InProgress ->
            "IN_PROGRESS"

        Recommended ->
            "RECOMMENDED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PrerequisiteState
fromString enumString____ =
    case enumString____ of
        "ACQUIRED" ->
            Just Acquired

        "IN_PROGRESS" ->
            Just InProgress

        "RECOMMENDED" ->
            Just Recommended

        _ ->
            Nothing
