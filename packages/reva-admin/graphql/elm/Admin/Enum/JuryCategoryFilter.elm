-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.JuryCategoryFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type JuryCategoryFilter
    = All
    | Scheduled
    | Passed


list : List JuryCategoryFilter
list =
    [ All, Scheduled, Passed ]


decoder : Decoder JuryCategoryFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ALL" ->
                        Decode.succeed All

                    "SCHEDULED" ->
                        Decode.succeed Scheduled

                    "PASSED" ->
                        Decode.succeed Passed

                    _ ->
                        Decode.fail ("Invalid JuryCategoryFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : JuryCategoryFilter -> String
toString enum____ =
    case enum____ of
        All ->
            "ALL"

        Scheduled ->
            "SCHEDULED"

        Passed ->
            "PASSED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe JuryCategoryFilter
fromString enumString____ =
    case enumString____ of
        "ALL" ->
            Just All

        "SCHEDULED" ->
            Just Scheduled

        "PASSED" ->
            Just Passed

        _ ->
            Nothing
