-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.CandidacyStatusStep exposing (..)

import Json.Decode as Decode exposing (Decoder)


type CandidacyStatusStep
    = Archive
    | Projet
    | Validation
    | PriseEnCharge
    | ParcoursEnvoye
    | ParcoursConfirme
    | DossierFaisabiliteEnvoye
    | DossierFaisabiliteRecevable
    | DossierFaisabiliteNonRecevable
    | DemandeFinancementEnvoye
    | DemandePaiementEnvoyee
    | DossierPro
    | Certification


list : List CandidacyStatusStep
list =
    [ Archive, Projet, Validation, PriseEnCharge, ParcoursEnvoye, ParcoursConfirme, DossierFaisabiliteEnvoye, DossierFaisabiliteRecevable, DossierFaisabiliteNonRecevable, DemandeFinancementEnvoye, DemandePaiementEnvoyee, DossierPro, Certification ]


decoder : Decoder CandidacyStatusStep
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ARCHIVE" ->
                        Decode.succeed Archive

                    "PROJET" ->
                        Decode.succeed Projet

                    "VALIDATION" ->
                        Decode.succeed Validation

                    "PRISE_EN_CHARGE" ->
                        Decode.succeed PriseEnCharge

                    "PARCOURS_ENVOYE" ->
                        Decode.succeed ParcoursEnvoye

                    "PARCOURS_CONFIRME" ->
                        Decode.succeed ParcoursConfirme

                    "DOSSIER_FAISABILITE_ENVOYE" ->
                        Decode.succeed DossierFaisabiliteEnvoye

                    "DOSSIER_FAISABILITE_RECEVABLE" ->
                        Decode.succeed DossierFaisabiliteRecevable

                    "DOSSIER_FAISABILITE_NON_RECEVABLE" ->
                        Decode.succeed DossierFaisabiliteNonRecevable

                    "DEMANDE_FINANCEMENT_ENVOYE" ->
                        Decode.succeed DemandeFinancementEnvoye

                    "DEMANDE_PAIEMENT_ENVOYEE" ->
                        Decode.succeed DemandePaiementEnvoyee

                    "DOSSIER_PRO" ->
                        Decode.succeed DossierPro

                    "CERTIFICATION" ->
                        Decode.succeed Certification

                    _ ->
                        Decode.fail ("Invalid CandidacyStatusStep type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CandidacyStatusStep -> String
toString enum____ =
    case enum____ of
        Archive ->
            "ARCHIVE"

        Projet ->
            "PROJET"

        Validation ->
            "VALIDATION"

        PriseEnCharge ->
            "PRISE_EN_CHARGE"

        ParcoursEnvoye ->
            "PARCOURS_ENVOYE"

        ParcoursConfirme ->
            "PARCOURS_CONFIRME"

        DossierFaisabiliteEnvoye ->
            "DOSSIER_FAISABILITE_ENVOYE"

        DossierFaisabiliteRecevable ->
            "DOSSIER_FAISABILITE_RECEVABLE"

        DossierFaisabiliteNonRecevable ->
            "DOSSIER_FAISABILITE_NON_RECEVABLE"

        DemandeFinancementEnvoye ->
            "DEMANDE_FINANCEMENT_ENVOYE"

        DemandePaiementEnvoyee ->
            "DEMANDE_PAIEMENT_ENVOYEE"

        DossierPro ->
            "DOSSIER_PRO"

        Certification ->
            "CERTIFICATION"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CandidacyStatusStep
fromString enumString____ =
    case enumString____ of
        "ARCHIVE" ->
            Just Archive

        "PROJET" ->
            Just Projet

        "VALIDATION" ->
            Just Validation

        "PRISE_EN_CHARGE" ->
            Just PriseEnCharge

        "PARCOURS_ENVOYE" ->
            Just ParcoursEnvoye

        "PARCOURS_CONFIRME" ->
            Just ParcoursConfirme

        "DOSSIER_FAISABILITE_ENVOYE" ->
            Just DossierFaisabiliteEnvoye

        "DOSSIER_FAISABILITE_RECEVABLE" ->
            Just DossierFaisabiliteRecevable

        "DOSSIER_FAISABILITE_NON_RECEVABLE" ->
            Just DossierFaisabiliteNonRecevable

        "DEMANDE_FINANCEMENT_ENVOYE" ->
            Just DemandeFinancementEnvoye

        "DEMANDE_PAIEMENT_ENVOYEE" ->
            Just DemandePaiementEnvoyee

        "DOSSIER_PRO" ->
            Just DossierPro

        "CERTIFICATION" ->
            Just Certification

        _ ->
            Nothing
