-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Object.DematerializedFeasibilityFile exposing (..)

import Admin.Enum.CompetenceBlocsPartCompletion
import Admin.Enum.DFFileDecision
import Admin.InputObject
import Admin.Interface
import Admin.Object
import Admin.Scalar
import Admin.Union
import Data.Scalar
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Data.Scalar.Id Admin.Object.DematerializedFeasibilityFile
id =
    Object.selectionForField "Data.Scalar.Id" "id" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecId |> .decoder)


candidacyId : SelectionSet Data.Scalar.Id Admin.Object.DematerializedFeasibilityFile
candidacyId =
    Object.selectionForField "Data.Scalar.Id" "candidacyId" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecId |> .decoder)


firstForeignLanguage : SelectionSet (Maybe String) Admin.Object.DematerializedFeasibilityFile
firstForeignLanguage =
    Object.selectionForField "(Maybe String)" "firstForeignLanguage" [] (Decode.string |> Decode.nullable)


secondForeignLanguage : SelectionSet (Maybe String) Admin.Object.DematerializedFeasibilityFile
secondForeignLanguage =
    Object.selectionForField "(Maybe String)" "secondForeignLanguage" [] (Decode.string |> Decode.nullable)


option : SelectionSet (Maybe String) Admin.Object.DematerializedFeasibilityFile
option =
    Object.selectionForField "(Maybe String)" "option" [] (Decode.string |> Decode.nullable)


type alias BlocsDeCompetencesOptionalArguments =
    { blocDeCompetencesId : OptionalArgument Data.Scalar.Id }


blocsDeCompetences :
    (BlocsDeCompetencesOptionalArguments -> BlocsDeCompetencesOptionalArguments)
    -> SelectionSet decodesTo Admin.Object.DFFCertificationCompetenceBloc
    -> SelectionSet (List decodesTo) Admin.Object.DematerializedFeasibilityFile
blocsDeCompetences fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { blocDeCompetencesId = Absent }

        optionalArgs____ =
            [ Argument.optional "blocDeCompetencesId" filledInOptionals____.blocDeCompetencesId (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "blocsDeCompetences" optionalArgs____ object____ (Basics.identity >> Decode.list)


certificationPartComplete : SelectionSet Bool Admin.Object.DematerializedFeasibilityFile
certificationPartComplete =
    Object.selectionForField "Bool" "certificationPartComplete" [] Decode.bool


attachmentsPartComplete : SelectionSet Bool Admin.Object.DematerializedFeasibilityFile
attachmentsPartComplete =
    Object.selectionForField "Bool" "attachmentsPartComplete" [] Decode.bool


competenceBlocsPartCompletion : SelectionSet Admin.Enum.CompetenceBlocsPartCompletion.CompetenceBlocsPartCompletion Admin.Object.DematerializedFeasibilityFile
competenceBlocsPartCompletion =
    Object.selectionForField "Enum.CompetenceBlocsPartCompletion.CompetenceBlocsPartCompletion" "competenceBlocsPartCompletion" [] Admin.Enum.CompetenceBlocsPartCompletion.decoder


certificationCompetenceDetails :
    SelectionSet decodesTo Admin.Object.CertificationCompetenceDetails
    -> SelectionSet (List decodesTo) Admin.Object.DematerializedFeasibilityFile
certificationCompetenceDetails object____ =
    Object.selectionForCompositeField "certificationCompetenceDetails" [] object____ (Basics.identity >> Decode.list)


prerequisitesPartComplete : SelectionSet Bool Admin.Object.DematerializedFeasibilityFile
prerequisitesPartComplete =
    Object.selectionForField "Bool" "prerequisitesPartComplete" [] Decode.bool


prerequisites :
    SelectionSet decodesTo Admin.Object.Prerequisite
    -> SelectionSet (List (Maybe decodesTo)) Admin.Object.DematerializedFeasibilityFile
prerequisites object____ =
    Object.selectionForCompositeField "prerequisites" [] object____ (Basics.identity >> Decode.nullable >> Decode.list)


aapDecision : SelectionSet (Maybe Admin.Enum.DFFileDecision.DFFileDecision) Admin.Object.DematerializedFeasibilityFile
aapDecision =
    Object.selectionForField "(Maybe Enum.DFFileDecision.DFFileDecision)" "aapDecision" [] (Admin.Enum.DFFileDecision.decoder |> Decode.nullable)


aapDecisionComment : SelectionSet (Maybe String) Admin.Object.DematerializedFeasibilityFile
aapDecisionComment =
    Object.selectionForField "(Maybe String)" "aapDecisionComment" [] (Decode.string |> Decode.nullable)


aapDecisionSentAt : SelectionSet (Maybe Data.Scalar.Timestamp) Admin.Object.DematerializedFeasibilityFile
aapDecisionSentAt =
    Object.selectionForField "(Maybe Data.Scalar.Timestamp)" "aapDecisionSentAt" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecTimestamp |> .decoder |> Decode.nullable)


attachments :
    SelectionSet decodesTo Admin.Object.DFFAttachment
    -> SelectionSet (List (Maybe decodesTo)) Admin.Object.DematerializedFeasibilityFile
attachments object____ =
    Object.selectionForCompositeField "attachments" [] object____ (Basics.identity >> Decode.nullable >> Decode.list)


candidacy :
    SelectionSet decodesTo Admin.Object.Candidacy
    -> SelectionSet decodesTo Admin.Object.DematerializedFeasibilityFile
candidacy object____ =
    Object.selectionForCompositeField "candidacy" [] object____ Basics.identity


sentToCandidateAt : SelectionSet (Maybe Data.Scalar.Timestamp) Admin.Object.DematerializedFeasibilityFile
sentToCandidateAt =
    Object.selectionForField "(Maybe Data.Scalar.Timestamp)" "sentToCandidateAt" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecTimestamp |> .decoder |> Decode.nullable)


sentToCertificationAuthorityAt : SelectionSet (Maybe Data.Scalar.Timestamp) Admin.Object.DematerializedFeasibilityFile
sentToCertificationAuthorityAt =
    Object.selectionForField "(Maybe Data.Scalar.Timestamp)" "sentToCertificationAuthorityAt" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecTimestamp |> .decoder |> Decode.nullable)


swornStatementFileId : SelectionSet (Maybe Data.Scalar.Id) Admin.Object.DematerializedFeasibilityFile
swornStatementFileId =
    Object.selectionForField "(Maybe Data.Scalar.Id)" "swornStatementFileId" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


swornStatementFile :
    SelectionSet decodesTo Admin.Object.File
    -> SelectionSet (Maybe decodesTo) Admin.Object.DematerializedFeasibilityFile
swornStatementFile object____ =
    Object.selectionForCompositeField "swornStatementFile" [] object____ (Basics.identity >> Decode.nullable)


isReadyToBeSentToCandidate : SelectionSet Bool Admin.Object.DematerializedFeasibilityFile
isReadyToBeSentToCandidate =
    Object.selectionForField "Bool" "isReadyToBeSentToCandidate" [] Decode.bool


isReadyToBeSentToCertificationAuthority : SelectionSet Bool Admin.Object.DematerializedFeasibilityFile
isReadyToBeSentToCertificationAuthority =
    Object.selectionForField "Bool" "isReadyToBeSentToCertificationAuthority" [] Decode.bool
