-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Object.DematerializedFeasibilityFile exposing (..)

import Admin.Enum.CompetenceBlocsPartCompletion
import Admin.InputObject
import Admin.Interface
import Admin.Object
import Admin.Scalar
import Admin.Union
import Data.Scalar
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Data.Scalar.Id Admin.Object.DematerializedFeasibilityFile
id =
    Object.selectionForField "Data.Scalar.Id" "id" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecId |> .decoder)


candidacyId : SelectionSet Data.Scalar.Id Admin.Object.DematerializedFeasibilityFile
candidacyId =
    Object.selectionForField "Data.Scalar.Id" "candidacyId" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecId |> .decoder)


firstForeignLanguage : SelectionSet (Maybe String) Admin.Object.DematerializedFeasibilityFile
firstForeignLanguage =
    Object.selectionForField "(Maybe String)" "firstForeignLanguage" [] (Decode.string |> Decode.nullable)


secondForeignLanguage : SelectionSet (Maybe String) Admin.Object.DematerializedFeasibilityFile
secondForeignLanguage =
    Object.selectionForField "(Maybe String)" "secondForeignLanguage" [] (Decode.string |> Decode.nullable)


option : SelectionSet (Maybe String) Admin.Object.DematerializedFeasibilityFile
option =
    Object.selectionForField "(Maybe String)" "option" [] (Decode.string |> Decode.nullable)


type alias BlocsDeCompetencesOptionalArguments =
    { blocDeCompetencesId : OptionalArgument Data.Scalar.Id }


blocsDeCompetences :
    (BlocsDeCompetencesOptionalArguments -> BlocsDeCompetencesOptionalArguments)
    -> SelectionSet decodesTo Admin.Object.CertificationCompetenceBloc
    -> SelectionSet (List decodesTo) Admin.Object.DematerializedFeasibilityFile
blocsDeCompetences fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { blocDeCompetencesId = Absent }

        optionalArgs____ =
            [ Argument.optional "blocDeCompetencesId" filledInOptionals____.blocDeCompetencesId (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "blocsDeCompetences" optionalArgs____ object____ (Basics.identity >> Decode.list)


certificationPartComplete : SelectionSet Bool Admin.Object.DematerializedFeasibilityFile
certificationPartComplete =
    Object.selectionForField "Bool" "certificationPartComplete" [] Decode.bool


competenceBlocsPartCompletion : SelectionSet Admin.Enum.CompetenceBlocsPartCompletion.CompetenceBlocsPartCompletion Admin.Object.DematerializedFeasibilityFile
competenceBlocsPartCompletion =
    Object.selectionForField "Enum.CompetenceBlocsPartCompletion.CompetenceBlocsPartCompletion" "competenceBlocsPartCompletion" [] Admin.Enum.CompetenceBlocsPartCompletion.decoder


certificationCompetenceDetails :
    SelectionSet decodesTo Admin.Object.CertificationCompetenceDetails
    -> SelectionSet (List decodesTo) Admin.Object.DematerializedFeasibilityFile
certificationCompetenceDetails object____ =
    Object.selectionForCompositeField "certificationCompetenceDetails" [] object____ (Basics.identity >> Decode.list)
