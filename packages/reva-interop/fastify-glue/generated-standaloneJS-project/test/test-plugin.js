// this file contains a test harness that was auto-generated by fastify-openapi-glue
// running the tests directly after generation will probably fail as the parameters
// need to be manually added.

import { strict as assert } from "node:assert/strict";
import { test } from "node:test";
import Fastify from "fastify";
import fastifyPlugin from "../index.js";
import { options } from "../index.js";

const opts = {};
//
// Operation: getVCandidaturesByCandidatureId
// URL: /v1/candidatures/:candidatureId
// summary:	Récupérer les détails d'une candidature
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Détails de la candidature
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: object
//               properties:
//                 id:
//                   type: string
//                   format: uuid
//                   description: ID de la candidature
//                   example: 123e4567-e89b-12d3-a456-426614174000
//                 certification:
//                   type: object
//                   properties:
//                     codeRncp:
//                       type: string
//                       maxLength: 255
//                       example: '35830'
//                     nom:
//                       type: string
//                       maxLength: 255
//                       example: Diplôme d'Etat Aide soignant - DEAS
//                     estViseePartiellement:
//                       type: boolean
//                       example: false
//                 candidat:
//                   type: object
//                   properties:
//                     genre:
//                       type: string
//                       enum:
//                         - HOMME
//                         - FEMME
//                         - NON_SPECIFIE
//                       example: FEMME
//                       description: Genre du candidat
//                     prenom:
//                       type: string
//                       maxLength: 255
//                       example: Alice
//                     prenom2:
//                       type: string
//                       maxLength: 255
//                       example: Marie
//                     prenom3:
//                       type: string
//                       maxLength: 255
//                       example: Claire
//                     nom:
//                       type: string
//                       maxLength: 255
//                       example: Doe
//                     nomUsage:
//                       type: string
//                       maxLength: 255
//                       example: Poe
//                     communeNaissance:
//                       type: string
//                       maxLength: 255
//                       example: Paris
//                     departementNaissance: &ref_1
//                       type: object
//                       properties:
//                         code:
//                           type: string
//                           maxLength: 5
//                           description: Code du département
//                           example: '973'
//                         nom:
//                           type: string
//                           maxLength: 255
//                           description: Nom du département
//                           example: Guyane
//                     dateNaissance:
//                       type: string
//                       format: date
//                       example: '1980-01-01'
//                     nationalite:
//                       type: string
//                       maxLength: 255
//                       example: Française
//                     situation:
//                       type: object
//                       properties:
//                         niveauCertificationObtenuePlusEleve: &ref_0
//                           type: object
//                           properties:
//                             code:
//                               type: string
//                               maxLength: 255
//                               description: >
//                                 Code du diplôme (N1_SANS, N2_CLEA, N3_CAP_BEP,
//                                 N4_BAC, N5_BAC_2, N6_BAC_3_4, N7_BAC_5 ou
//                                 N8_BAC_8)
//                               example: N4_BAC
//                             label:
//                               type: string
//                               maxLength: 255
//                               example: 'Niveau 4 : Baccalauréat'
//                             labelLong:
//                               type: string
//                               maxLength: 255
//                               example: >-
//                                 Niveau 4 (Bac pro, Brevet professionnel, CQP 4, MC
//                                 4, Titre professionnel 4, DE 4)
//                             niveau:
//                               type: integer
//                               example: 4
//                         intituleCertificationObtenuePlusEleve:
//                           type: string
//                           maxLength: 255
//                           example: Baccalauréat Scientifique
//                         niveauFormationPlusEleve: *ref_0
//                         typologie:
//                           type: string
//                           enum:
//                             - NON_SPECIFIE
//                             - SALARIE_PRIVE
//                             - SALARIE_PUBLIC
//                             - SALARIE_PUBLIC_HOSPITALIER
//                             - SALARIE_ALTERNANT
//                             - SALARIE_INTERIMAIRE
//                             - SALARIE_INTERMITTENT
//                             - SALARIE_EN_CONTRATS_AIDES
//                             - TRAVAILLEUR_NON_SALARIE
//                             - CONJOINT_COLLABORATEUR
//                             - DEMANDEUR_EMPLOI
//                             - AIDANTS_FAMILIAUX
//                             - AIDANTS_FAMILIAUX_AGRICOLES
//                             - BENEVOLE
//                             - STAGIAIRE
//                             - TITULAIRE_MANDAT_ELECTIF
//                             - AUTRE
//                           description: Typologie du candidat
//                           example: SALARIE_PRIVE
//                     email:
//                       type: string
//                       maxLength: 255
//                       format: email
//                       example: alice.doe@example.com
//                     telephone:
//                       type: string
//                       maxLength: 10
//                       minLength: 10
//                       example: '+33612345678'
//                     adresse:
//                       type: object
//                       properties:
//                         departement: *ref_1
//                         codePostal:
//                           type: string
//                           pattern: ^\d{5}$
//                           description: Code postal
//                           example: '75001'
//                         rue:
//                           type: string
//                           maxLength: 255
//                           description: Rue
//                           example: 1234 rue de la Paix
//                         complementAdresse:
//                           type: string
//                           maxLength: 255
//                           description: Complément d'adresse
//                           example: Bâtiment A
//                         ville:
//                           type: string
//                           maxLength: 255
//                           description: Ville
//                           example: Paris
//                         pays:
//                           type: string
//                           maxLength: 255
//                           description: Pays
//                           example: France
//                 organisme:
//                   type: object
//                   properties:
//                     nom:
//                       type: string
//                       maxLength: 255
//                       example: Organisme de Formation ABC
//                     contact:
//                       type: object
//                       properties:
//                         nom:
//                           type: string
//                           maxLength: 255
//                           example: John Doe
//                         email:
//                           type: string
//                           maxLength: 255
//                           format: email
//                           example: contact@organisme-abc.fr
//                         telephone:
//                           type: string
//                           maxLength: 255
//                           example: '+33123456789'
//                     siteWeb:
//                       type: string
//                       maxLength: 255
//                       format: uri
//                       example: https://www.organisme-abc.fr
//

test("testing getVCandidaturesByCandidatureId", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVCandidaturesByCandidatureIdDossierDeFaisabilite
// URL: /v1/candidatures/:candidatureId/dossierDeFaisabilite
// summary:	Récupérer le dernier dossier de faisabilité d'une candidature
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Dossier de faisabilité
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: object
//               properties:
//                 candidatureId:
//                   type: string
//                   format: uuid
//                   description: ID de la candidature
//                   example: 123e4567-e89b-12d3-a456-426614174000
//                 dateEnvoi:
//                   type: string
//                   format: date-time
//                   example: '2023-10-01T10:00:00Z'
//                 documents:
//                   type: array
//                   description: >-
//                     Le dossier de faisabilité, la pièce d'identité et autres
//                     documents éventuels
//                   items:
//                     type: object
//                     properties:
//                       nom:
//                         type: string
//                         maxLength: 255
//                         example: document.pdf
//                       url:
//                         type: string
//                         example: https://files.vae.gouv.fr/abc/document.pdf
//                       typeMime:
//                         type: string
//                         maxLength: 255
//                         example: application/pdf
//                 experiences:
//                   type: array
//                   description: Les expériences du candidat
//                   items:
//                     type: object
//                     properties:
//                       titre:
//                         type: string
//                         description: Titre de l'expérience
//                         example: Boulanger
//                       description:
//                         type: string
//                         description: Description de l'expérience
//                         example: Préparation et cuisson de pains et viennoiseries
//                       duree:
//                         type: string
//                         enum:
//                           - INCONNU
//                           - MOINS_D_UN_AN
//                           - ENTRE_UN_ET_TROIS_ANS
//                           - PLUS_DE_TROIS_ANS
//                           - PLUS_DE_CINQ_ANS
//                           - PLUS_DE_DIX_ANS
//                         description: Durée de l'expérience
//                         example: ENTRE_UN_ET_TROIS_ANS
//                       dateDemarrage:
//                         type: string
//                         format: date
//                         description: Date de démarrage de l'expérience
//                         example: '2021-01-01'
//                 statut:
//                   type: string
//                   enum:
//                     - EN_ATTENTE
//                     - IRRECEVABLE
//                     - RECEVABLE
//                     - INCOMPLET
//                     - COMPLET
//                     - ARCHIVE
//                     - ABANDONNE
//                   description: Filtre par statut du dossier de faisabilité
//                   example: EN_ATTENTE
//

test("testing getVCandidaturesByCandidatureIdDossierDeFaisabilite", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeFaisabilite",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVCandidaturesByCandidatureIdDossierDeFaisabiliteDecisions
// URL: /v1/candidatures/:candidatureId/dossierDeFaisabilite/decisions
// summary:	Récupérer la liste des décisions du dossier de faisabilité
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Liste des décisions sur le dossier de faisabilité
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: array
//               items:
//                 type: object
//                 properties:
//                   decision:
//                     type: string
//                     enum:
//                       - IRRECEVABLE
//                       - RECEVABLE
//                       - INCOMPLET
//                       - COMPLET
//                     description: |
//                       Décision sur le dossier de faisabilité.
//                     example: INCOMPLET
//                   commentaire:
//                     type: string
//                     description: Motifs éventuels de la décision
//                     example: La pièce d'identité n'est pas lisible.
//                   dateEnvoi:
//                     type: string
//                     format: date-time
//                     description: Date d'envoi de la décision
//                     example: '2023-10-05T15:00:00Z'
//                   document:
//                     type: object
//                     properties:
//                       nom:
//                         type: string
//                         maxLength: 255
//                         example: document.pdf
//                       url:
//                         type: string
//                         example: https://files.vae.gouv.fr/abc/document.pdf
//                       typeMime:
//                         type: string
//                         maxLength: 255
//                         example: application/pdf
//

test("testing getVCandidaturesByCandidatureIdDossierDeFaisabiliteDecisions", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeFaisabilite/decisions",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: postVCandidaturesByCandidatureIdDossierDeFaisabiliteDecisions
// URL: /v1/candidatures/:candidatureId/dossierDeFaisabilite/decisions
// summary:	Créer une nouvelle décision sur le dossier de faisabilité
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// req.body
//   content:
//     multipart/form-data:
//       schema:
//         type: object
//         properties:
//           decision:
//             type: string
//             enum:
//               - IRRECEVABLE
//               - RECEVABLE
//               - INCOMPLET
//               - COMPLET
//             description: |
//               Décision sur le dossier de faisabilité.
//             example: INCOMPLET
//           commentaire:
//             type: string
//             description: Motifs de la décision
//             example: La pièce d'identité n'est pas lisible.
//           document:
//             type: string
//             format: binary
//             description: Le courrier de recevabilité éventuel
//         required:
//           - decision
//
// valid responses
//   '201':
//     description: Nouvelle décision créée avec succès
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: object
//               properties:
//                 decision:
//                   type: string
//                   enum:
//                     - IRRECEVABLE
//                     - RECEVABLE
//                     - INCOMPLET
//                     - COMPLET
//                   description: |
//                     Décision sur le dossier de faisabilité.
//                   example: INCOMPLET
//                 commentaire:
//                   type: string
//                   description: Motifs éventuels de la décision
//                   example: La pièce d'identité n'est pas lisible.
//                 dateEnvoi:
//                   type: string
//                   format: date-time
//                   description: Date d'envoi de la décision
//                   example: '2023-10-05T15:00:00Z'
//                 document:
//                   type: object
//                   properties:
//                     nom:
//                       type: string
//                       maxLength: 255
//                       example: document.pdf
//                     url:
//                       type: string
//                       example: https://files.vae.gouv.fr/abc/document.pdf
//                     typeMime:
//                       type: string
//                       maxLength: 255
//                       example: application/pdf
//

test("testing postVCandidaturesByCandidatureIdDossierDeFaisabiliteDecisions", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "POST",
		url: "/v1/candidatures/:candidatureId/dossierDeFaisabilite/decisions",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVDossiersDeFaisabilite
// URL: /v1/dossiersDeFaisabilite
// summary:	Récupérer la liste des dossiers de faisabilité
// req.query
//   type: object
//   properties:
//     decalage:
//       type: integer
//       example: 0
//       description: Décalage pour la pagination
//     limite:
//       type: integer
//       example: 10
//       description: Limite du nombre de résultats
//     recherche:
//       type: string
//       maxLength: 100
//       example: Alice+Doe
//       description: Recherche par mots-clés (nom, prénom, email...)
//     statut:
//       type: string
//       enum:
//         - EN_ATTENTE
//         - IRRECEVABLE
//         - RECEVABLE
//         - INCOMPLET
//         - COMPLET
//         - ARCHIVE
//         - ABANDONNE
//       description: Filtre par statut du dossier de faisabilité
//       example: EN_ATTENTE
//
// valid responses
//   '200':
//     description: Liste des dossiers de faisabilité
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: array
//               items:
//                 type: object
//                 properties:
//                   candidatureId:
//                     type: string
//                     format: uuid
//                     description: ID de la candidature
//                     example: 123e4567-e89b-12d3-a456-426614174000
//                   dateEnvoi:
//                     type: string
//                     format: date-time
//                     example: '2023-10-01T10:00:00Z'
//                   documents:
//                     type: array
//                     description: >-
//                       Le dossier de faisabilité, la pièce d'identité et autres
//                       documents éventuels
//                     items:
//                       type: object
//                       properties:
//                         nom:
//                           type: string
//                           maxLength: 255
//                           example: document.pdf
//                         url:
//                           type: string
//                           example: https://files.vae.gouv.fr/abc/document.pdf
//                         typeMime:
//                           type: string
//                           maxLength: 255
//                           example: application/pdf
//                   experiences:
//                     type: array
//                     description: Les expériences du candidat
//                     items:
//                       type: object
//                       properties:
//                         titre:
//                           type: string
//                           description: Titre de l'expérience
//                           example: Boulanger
//                         description:
//                           type: string
//                           description: Description de l'expérience
//                           example: Préparation et cuisson de pains et viennoiseries
//                         duree:
//                           type: string
//                           enum:
//                             - INCONNU
//                             - MOINS_D_UN_AN
//                             - ENTRE_UN_ET_TROIS_ANS
//                             - PLUS_DE_TROIS_ANS
//                             - PLUS_DE_CINQ_ANS
//                             - PLUS_DE_DIX_ANS
//                           description: Durée de l'expérience
//                           example: ENTRE_UN_ET_TROIS_ANS
//                         dateDemarrage:
//                           type: string
//                           format: date
//                           description: Date de démarrage de l'expérience
//                           example: '2021-01-01'
//                   statut:
//                     type: string
//                     enum:
//                       - EN_ATTENTE
//                       - IRRECEVABLE
//                       - RECEVABLE
//                       - INCOMPLET
//                       - COMPLET
//                       - ARCHIVE
//                       - ABANDONNE
//                     description: Filtre par statut du dossier de faisabilité
//                     example: EN_ATTENTE
//             info:
//               type: object
//               properties:
//                 totalElements:
//                   type: integer
//                   description: Nombre total d'éléments
//                   example: 100
//                 totalPages:
//                   type: integer
//                   description: Nombre total de pages
//                   example: 10
//                 pageCourante:
//                   type: integer
//                   description: Page courante
//                   example: 1
//

test("testing getVDossiersDeFaisabilite", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/dossiersDeFaisabilite",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVDossiersDeValidation
// URL: /v1/dossiersDeValidation
// summary:	Récupérer la liste des dossiers de validation
// req.query
//   type: object
//   properties:
//     decalage:
//       type: integer
//       example: 0
//       description: Décalage pour la pagination
//     limite:
//       type: integer
//       example: 10
//       description: Limite du nombre de résultats
//     recherche:
//       type: string
//       maxLength: 100
//       example: Alice+Doe
//       description: Filtre de recherche
//     statut:
//       type: string
//       enum:
//         - EN_ATTENTE
//         - SIGNALE
//         - VERIFIE
//       description: Filtre par statut du dossier de validation
//       example: VERIFIE
//
// valid responses
//   '200':
//     description: Liste des dossiers de validation
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: array
//               items:
//                 type: object
//                 properties:
//                   candidatureId:
//                     type: string
//                     format: uuid
//                     description: ID de la candidature
//                     example: 123e4567-e89b-12d3-a456-426614174000
//                   dateEnvoi:
//                     type: string
//                     format: date-time
//                     example: '2023-11-01T10:00:00Z'
//                   documents:
//                     type: array
//                     description: La dossier de validation et autres documents éventuels
//                     items:
//                       type: object
//                       properties:
//                         nom:
//                           type: string
//                           maxLength: 255
//                           example: document.pdf
//                         url:
//                           type: string
//                           example: https://files.vae.gouv.fr/abc/document.pdf
//                         typeMime:
//                           type: string
//                           maxLength: 255
//                           example: application/pdf
//                   statut:
//                     type: string
//                     enum:
//                       - EN_ATTENTE
//                       - SIGNALE
//                       - VERIFIE
//                     description: Filtre par statut du dossier de validation
//                     example: VERIFIE
//             info:
//               type: object
//               properties:
//                 totalElements:
//                   type: integer
//                   description: Nombre total d'éléments
//                   example: 100
//                 totalPages:
//                   type: integer
//                   description: Nombre total de pages
//                   example: 10
//                 pageCourante:
//                   type: integer
//                   description: Page courante
//                   example: 1
//

test("testing getVDossiersDeValidation", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/dossiersDeValidation",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVCandidaturesByCandidatureIdDossierDeValidation
// URL: /v1/candidatures/:candidatureId/dossierDeValidation
// summary:	Récupérer le dernier dossier de validation d'une candidature
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Détails du dossier de validation
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: object
//               properties:
//                 candidatureId:
//                   type: string
//                   format: uuid
//                   description: ID de la candidature
//                   example: 123e4567-e89b-12d3-a456-426614174000
//                 dateEnvoi:
//                   type: string
//                   format: date-time
//                   example: '2023-11-01T10:00:00Z'
//                 documents:
//                   type: array
//                   description: La dossier de validation et autres documents éventuels
//                   items:
//                     type: object
//                     properties:
//                       nom:
//                         type: string
//                         maxLength: 255
//                         example: document.pdf
//                       url:
//                         type: string
//                         example: https://files.vae.gouv.fr/abc/document.pdf
//                       typeMime:
//                         type: string
//                         maxLength: 255
//                         example: application/pdf
//                 statut:
//                   type: string
//                   enum:
//                     - EN_ATTENTE
//                     - SIGNALE
//                     - VERIFIE
//                   description: Filtre par statut du dossier de validation
//                   example: VERIFIE
//

test("testing getVCandidaturesByCandidatureIdDossierDeValidation", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeValidation",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVCandidaturesByCandidatureIdDossierDeValidationDecisions
// URL: /v1/candidatures/:candidatureId/dossierDeValidation/decisions
// summary:	Récupérer la liste des décisions sur le dossier de validation
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Liste des décisions sur le dossier de validation
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: array
//               items:
//                 type: object
//                 properties:
//                   decision:
//                     type: string
//                     enum:
//                       - SIGNALE
//                       - VERIFIE
//                     description: |
//                       Décision sur le dossier de validation.
//                     example: SIGNALE
//                   commentaire:
//                     type: string
//                     description: Commentaire sur la décision
//                     example: Le dossier n'est pas lisible.
//                   dateEnvoi:
//                     type: string
//                     format: date-time
//                     description: Date d'envoi de la décision
//                     example: '2023-11-05T16:00:00Z'
//

test("testing getVCandidaturesByCandidatureIdDossierDeValidationDecisions", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeValidation/decisions",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: postVCandidaturesByCandidatureIdDossierDeValidationDecisions
// URL: /v1/candidatures/:candidatureId/dossierDeValidation/decisions
// summary:	Créer une nouvelle décision sur le dossier de validation
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// req.body
//   content:
//     application/json:
//       schema:
//         type: object
//         properties:
//           decision:
//             type: string
//             enum:
//               - SIGNALE
//               - VERIFIE
//             description: |
//               Décision sur le dossier de validation.
//             example: SIGNALE
//           commentaire:
//             type: string
//             description: Motifs de la décision
//             example: Le dossier n'est pas lisible.
//         required:
//           - decision
//
// valid responses
//   '201':
//     description: Nouvelle décision créée avec succès
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: object
//               properties:
//                 decision:
//                   type: string
//                   enum:
//                     - SIGNALE
//                     - VERIFIE
//                   description: |
//                     Décision sur le dossier de validation.
//                   example: SIGNALE
//                 commentaire:
//                   type: string
//                   description: Commentaire sur la décision
//                   example: Le dossier n'est pas lisible.
//                 dateEnvoi:
//                   type: string
//                   format: date-time
//                   description: Date d'envoi de la décision
//                   example: '2023-11-05T16:00:00Z'
//

test("testing postVCandidaturesByCandidatureIdDossierDeValidationDecisions", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "POST",
		url: "/v1/candidatures/:candidatureId/dossierDeValidation/decisions",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVInformationsJury
// URL: /v1/informationsJury
// summary:	Récupérer la liste des informations jury
// req.query
//   type: object
//   properties:
//     decalage:
//       type: integer
//       example: 0
//       description: Décalage pour la pagination
//     limite:
//       type: integer
//       example: 10
//       description: Limite du nombre de résultats
//     recherche:
//       type: string
//       maxLength: 100
//       example: Alice+Doe
//       description: Filtre de recherche
//     statut:
//       type: string
//       enum:
//         - PROGRAMME
//         - PASSE
//       description: Filtre par statut de jury
//       example: PROGRAMME
//
// valid responses
//   '200':
//     description: Liste des candidats à l'étape jury
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: array
//               items:
//                 type: object
//                 properties:
//                   candidatureId:
//                     type: string
//                     format: uuid
//                     description: ID de la candidature
//                     example: 123e4567-e89b-12d3-a456-426614174000
//                   statut:
//                     type: string
//                     enum:
//                       - PROGRAMME
//                       - PASSE
//                     description: Filtre par statut de jury
//                     example: PROGRAMME
//             info:
//               type: object
//               properties:
//                 totalElements:
//                   type: integer
//                   description: Nombre total d'éléments
//                   example: 100
//                 totalPages:
//                   type: integer
//                   description: Nombre total de pages
//                   example: 10
//                 pageCourante:
//                   type: integer
//                   description: Page courante
//                   example: 1
//

test("testing getVInformationsJury", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/informationsJury",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVCandidaturesByCandidatureIdInformationJury
// URL: /v1/candidatures/:candidatureId/informationJury
// summary:	Récupérer les informations du jury d'un candidat
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Informations du jury du candidat
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             data:
//               type: object
//               properties:
//                 candidatureId:
//                   type: string
//                   format: uuid
//                   description: ID de la candidature
//                   example: 123e4567-e89b-12d3-a456-426614174000
//                 statut:
//                   type: string
//                   enum:
//                     - PROGRAMME
//                     - PASSE
//                   description: Filtre par statut de jury
//                   example: PROGRAMME
//

test("testing getVCandidaturesByCandidatureIdInformationJury", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/informationJury",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVCandidaturesByCandidatureIdInformationJurySession
// URL: /v1/candidatures/:candidatureId/informationJury/session
// summary:	Récupérer les informations de la session du jury pour un candidat
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Informations de la session du jury
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             date:
//               type: string
//               format: date
//               description: Date de la session du jury
//               example: '2023-12-15'
//             heure:
//               type: string
//               format: time
//               description: Heure de la session du jury
//               example: '14:30'
//             adresseSession:
//               type: string
//               description: Adresse où se tient la session
//               example: 876 rue de l'Université, 75007 Paris
//             informationsSession:
//               type: string
//               description: Informations supplémentaires sur la session
//               example: Veuillez apporter une pièce d'identité.
//

test("testing getVCandidaturesByCandidatureIdInformationJurySession", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/informationJury/session",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: putVCandidaturesByCandidatureIdInformationJurySession
// URL: /v1/candidatures/:candidatureId/informationJury/session
// summary:	Mettre à jour les informations de la session du jury pour un candidat
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// req.body
//   content:
//     multipart/form-data:
//       schema:
//         type: object
//         properties:
//           date:
//             type: string
//             format: date
//             description: Date de la session du jury
//             example: '2023-12-15'
//           heure:
//             type: string
//             format: time
//             description: Heure de la session du jury
//             example: '14:30'
//           adresseSession:
//             type: string
//             description: Adresse où se tient la session
//             example: 876 rue de l'Université, 75007 Paris
//           informationsSession:
//             type: string
//             description: Informations supplémentaires sur la session
//             example: Se présenter 15 minutes avant le début de la session.
//           document:
//             type: string
//             format: binary
//             description: La convocation officielle éventuelle
//
// valid responses
//   '200':
//     description: Informations de session mises à jour avec succès
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             date:
//               type: string
//               format: date
//               description: Date de la session du jury
//               example: '2023-12-15'
//             heure:
//               type: string
//               format: time
//               description: Heure de la session du jury
//               example: '14:30'
//             adresseSession:
//               type: string
//               description: Adresse où se tient la session
//               example: 876 rue de l'Université, 75007 Paris
//             informationsSession:
//               type: string
//               description: Informations supplémentaires sur la session
//               example: Veuillez apporter une pièce d'identité.
//

test("testing putVCandidaturesByCandidatureIdInformationJurySession", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "PUT",
		url: "/v1/candidatures/:candidatureId/informationJury/session",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: getVCandidaturesByCandidatureIdInformationJuryResultat
// URL: /v1/candidatures/:candidatureId/informationJury/resultat
// summary:	Récupérer le résultat du jury pour un candidat
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// valid responses
//   '200':
//     description: Résultat du jury
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             resultat:
//               type: string
//               enum:
//                 - SUCCES_TOTAL_CERTIFICATION_COMPLETE
//                 - SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE
//                 - SUCCES_PARTIEL_CERTIFICATION_COMPLETE
//                 - SUCCES_TOTAL_CERTIFICATION_PARTIELLE
//                 - SUCCES_PARTIEL_CERTIFICATION_PARTIELLE
//                 - ECHEC
//                 - CANDIDAT_EXCUSE
//                 - CANDIDAT_ABSENT
//               description: |
//                 Résultat d'un jury.
//               example: SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE
//             dateEnvoi:
//               type: string
//               format: date-time
//               description: Date d'envoi du résultat du jury
//               example: '2023-10-01T10:00:00Z'
//             commentaire:
//               type: string
//               description: Informations supplémentaires sur le résultat
//               example: Validation totale sous réserve de présentation de l’AFGSU.
//

test("testing getVCandidaturesByCandidatureIdInformationJuryResultat", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/informationJury/resultat",
		payload: undefined,
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});

// Operation: putVCandidaturesByCandidatureIdInformationJuryResultat
// URL: /v1/candidatures/:candidatureId/informationJury/resultat
// summary:	Mettre à jour le résultat du jury pour un candidat
// req.params
//   type: object
//   properties:
//     candidatureId:
//       type: string
//       format: uuid
//       description: ID de la candidature
//       example: 123e4567-e89b-12d3-a456-426614174000
//   required:
//     - candidatureId
//
// req.body
//   content:
//     application/json:
//       schema:
//         type: object
//         properties:
//           resultat:
//             type: string
//             enum:
//               - SUCCES_TOTAL_CERTIFICATION_COMPLETE
//               - SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE
//               - SUCCES_PARTIEL_CERTIFICATION_COMPLETE
//               - SUCCES_TOTAL_CERTIFICATION_PARTIELLE
//               - SUCCES_PARTIEL_CERTIFICATION_PARTIELLE
//               - ECHEC
//               - CANDIDAT_EXCUSE
//               - CANDIDAT_ABSENT
//             description: |
//               Résultat d'un jury.
//             example: SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE
//           commentaire:
//             type: string
//             description: Informations supplémentaires sur le résultat
//             example: Validation totale sous réserve de présentation de l’AFGSU.
//         required:
//           - resultat
//
// valid responses
//   '200':
//     description: Résultat du jury mis à jour avec succès
//     content:
//       application/json:
//         schema:
//           type: object
//           properties:
//             resultat:
//               type: string
//               enum:
//                 - SUCCES_TOTAL_CERTIFICATION_COMPLETE
//                 - SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE
//                 - SUCCES_PARTIEL_CERTIFICATION_COMPLETE
//                 - SUCCES_TOTAL_CERTIFICATION_PARTIELLE
//                 - SUCCES_PARTIEL_CERTIFICATION_PARTIELLE
//                 - ECHEC
//                 - CANDIDAT_EXCUSE
//                 - CANDIDAT_ABSENT
//               description: |
//                 Résultat d'un jury.
//               example: SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE
//             dateEnvoi:
//               type: string
//               format: date-time
//               description: Date d'envoi du résultat du jury
//               example: '2023-10-01T10:00:00Z'
//             commentaire:
//               type: string
//               description: Informations supplémentaires sur le résultat
//               example: Validation totale sous réserve de présentation de l’AFGSU.
//

test("testing putVCandidaturesByCandidatureIdInformationJuryResultat", async (t) => {
	const fastify = Fastify(options);
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "PUT",
		url: "/v1/candidatures/:candidatureId/informationJury/resultat",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	assert.equal(res.statusCode, 200);
});
