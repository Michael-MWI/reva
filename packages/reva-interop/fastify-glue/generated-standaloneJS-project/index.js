// Fastify plugin autogenerated by fastify-openapi-glue

import fastifyPlugin from "fastify-plugin";
import { Security } from "./security.js";
import { SecurityError } from "./securityHandlers.js";	
import { Service } from "./service.js";

function notImplemented(operationId) {
	return async () => {
		throw new Error(`Operation ${operationId} not implemented`);
	};
}

function buildHandler(serviceHandlers, operationId) {
	if (operationId in serviceHandlers) {
		return serviceHandlers[operationId];
	}
	return notImplemented(operationId);
}

function buildPreHandler(securityHandlers, schemes) {
	if (schemes.length === 0) {
		return async () => { };
	}
	return async (req, reply) => {
		const handlerErrors = [];
		const schemeList = [];
		let statusCode = 401;
		for (const scheme of schemes) {
			try {
				await securityHandlers[scheme.name](req, reply, scheme.parameters);
				return; // If one security check passes, no need to try any others
			} catch (err) {
				req.log.debug(`Security handler '${scheme.name}' failed: '${err}'`);
				handlerErrors.push(err);
				if (err.statusCode !== undefined) {
					statusCode = err.statusCode;
				}
			}
			schemeList.push(scheme.name);
		}
		// if we get this far no security handlers validated this request
		throw new SecurityError(
			`None of the security schemes (${schemeList.join(", ")}) successfully authenticated this request.`,
			statusCode,
			"Unauthorized",
			handlerErrors,
		);
	};
}

export default fastifyPlugin(
	async (instance, opts) => {
		instance.register(generateRoutes, { prefix: "" })
	}, { fastify: '^4.x' })

async function generateRoutes(fastify, opts) {
	const service = new Service();
	const security = new Security();
	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureId").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeFaisabilite",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureIdDossierDeFaisabilite").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeFaisabilite/decisions",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureIdDossierDeFaisabiliteDecisions").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "POST",
		url: "/v1/candidatures/:candidatureId/dossierDeFaisabilite/decisions",
		schema: {
	"body": {
		"content": {
			"multipart/form-data": {
				"schema": {
					"type": "object",
					"properties": {
						"decision": {
							"type": "string",
							"enum": [
								"IRRECEVABLE",
								"RECEVABLE",
								"INCOMPLET",
								"COMPLET"
							],
							"description": "Décision sur le dossier de faisabilité.\n",
							"example": "INCOMPLET"
						},
						"commentaire": {
							"type": "string",
							"description": "Motifs de la décision",
							"example": "La pièce d'identité n'est pas lisible."
						},
						"document": {
							"type": "string",
							"format": "binary",
							"description": "Le courrier de recevabilité éventuel"
						}
					},
					"required": [
						"decision"
					]
				}
			}
		}
	},
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "postVCandidaturesByCandidatureIdDossierDeFaisabiliteDecisions").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/dossiersDeFaisabilite",
		schema: {
	"querystring": {
		"type": "object",
		"properties": {
			"decalage": {
				"type": "integer",
				"example": 0,
				"description": "Décalage pour la pagination"
			},
			"limite": {
				"type": "integer",
				"example": 10,
				"description": "Limite du nombre de résultats"
			},
			"recherche": {
				"type": "string",
				"maxLength": 100,
				"example": "Alice+Doe",
				"description": "Recherche par mots-clés (nom, prénom, email...)"
			},
			"statut": {
				"type": "string",
				"enum": [
					"EN_ATTENTE",
					"IRRECEVABLE",
					"RECEVABLE",
					"INCOMPLET",
					"COMPLET",
					"ARCHIVE",
					"ABANDONNE"
				],
				"description": "Filtre par statut du dossier de faisabilité",
				"example": "EN_ATTENTE"
			}
		}
	}
},
		handler: buildHandler(service, "getVDossiersDeFaisabilite").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/dossiersDeValidation",
		schema: {
	"querystring": {
		"type": "object",
		"properties": {
			"decalage": {
				"type": "integer",
				"example": 0,
				"description": "Décalage pour la pagination"
			},
			"limite": {
				"type": "integer",
				"example": 10,
				"description": "Limite du nombre de résultats"
			},
			"recherche": {
				"type": "string",
				"maxLength": 100,
				"example": "Alice+Doe",
				"description": "Filtre de recherche"
			},
			"statut": {
				"type": "string",
				"enum": [
					"EN_ATTENTE",
					"SIGNALE",
					"VERIFIE"
				],
				"description": "Filtre par statut du dossier de validation",
				"example": "VERIFIE"
			}
		}
	}
},
		handler: buildHandler(service, "getVDossiersDeValidation").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeValidation",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureIdDossierDeValidation").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/dossierDeValidation/decisions",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureIdDossierDeValidationDecisions").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "POST",
		url: "/v1/candidatures/:candidatureId/dossierDeValidation/decisions",
		schema: {
	"body": {
		"content": {
			"application/json": {
				"schema": {
					"type": "object",
					"properties": {
						"decision": {
							"type": "string",
							"enum": [
								"SIGNALE",
								"VERIFIE"
							],
							"description": "Décision sur le dossier de validation.\n",
							"example": "SIGNALE"
						},
						"commentaire": {
							"type": "string",
							"description": "Motifs de la décision",
							"example": "Le dossier n'est pas lisible."
						}
					},
					"required": [
						"decision"
					]
				}
			}
		}
	},
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "postVCandidaturesByCandidatureIdDossierDeValidationDecisions").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/informationsJury",
		schema: {
	"querystring": {
		"type": "object",
		"properties": {
			"decalage": {
				"type": "integer",
				"example": 0,
				"description": "Décalage pour la pagination"
			},
			"limite": {
				"type": "integer",
				"example": 10,
				"description": "Limite du nombre de résultats"
			},
			"recherche": {
				"type": "string",
				"maxLength": 100,
				"example": "Alice+Doe",
				"description": "Filtre de recherche"
			},
			"statut": {
				"type": "string",
				"enum": [
					"PROGRAMME",
					"PASSE"
				],
				"description": "Filtre par statut de jury",
				"example": "PROGRAMME"
			}
		}
	}
},
		handler: buildHandler(service, "getVInformationsJury").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/informationJury",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureIdInformationJury").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/informationJury/session",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureIdInformationJurySession").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "PUT",
		url: "/v1/candidatures/:candidatureId/informationJury/session",
		schema: {
	"body": {
		"content": {
			"multipart/form-data": {
				"schema": {
					"type": "object",
					"properties": {
						"date": {
							"type": "string",
							"format": "date",
							"description": "Date de la session du jury",
							"example": "2023-12-15"
						},
						"heure": {
							"type": "string",
							"format": "time",
							"description": "Heure de la session du jury",
							"example": "14:30"
						},
						"adresseSession": {
							"type": "string",
							"description": "Adresse où se tient la session",
							"example": "876 rue de l'Université, 75007 Paris"
						},
						"informationsSession": {
							"type": "string",
							"description": "Informations supplémentaires sur la session",
							"example": "Se présenter 15 minutes avant le début de la session."
						},
						"document": {
							"type": "string",
							"format": "binary",
							"description": "La convocation officielle éventuelle"
						}
					}
				}
			}
		}
	},
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "putVCandidaturesByCandidatureIdInformationJurySession").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "GET",
		url: "/v1/candidatures/:candidatureId/informationJury/resultat",
		schema: {
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "getVCandidaturesByCandidatureIdInformationJuryResultat").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

	fastify.route({
		method: "PUT",
		url: "/v1/candidatures/:candidatureId/informationJury/resultat",
		schema: {
	"body": {
		"content": {
			"application/json": {
				"schema": {
					"type": "object",
					"properties": {
						"resultat": {
							"type": "string",
							"enum": [
								"SUCCES_TOTAL_CERTIFICATION_COMPLETE",
								"SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE",
								"SUCCES_PARTIEL_CERTIFICATION_COMPLETE",
								"SUCCES_TOTAL_CERTIFICATION_PARTIELLE",
								"SUCCES_PARTIEL_CERTIFICATION_PARTIELLE",
								"ECHEC",
								"CANDIDAT_EXCUSE",
								"CANDIDAT_ABSENT"
							],
							"description": "Résultat d'un jury.\n",
							"example": "SUCCES_TOTAL_CERTIFICATION_COMPLETE_SOUS_RESERVE"
						},
						"commentaire": {
							"type": "string",
							"description": "Informations supplémentaires sur le résultat",
							"example": "Validation totale sous réserve de présentation de l’AFGSU."
						}
					},
					"required": [
						"resultat"
					]
				}
			}
		}
	},
	"params": {
		"type": "object",
		"properties": {
			"candidatureId": {
				"type": "string",
				"format": "uuid",
				"description": "ID de la candidature",
				"example": "123e4567-e89b-12d3-a456-426614174000"
			}
		},
		"required": [
			"candidatureId"
		]
	}
},
		handler: buildHandler(service, "putVCandidaturesByCandidatureIdInformationJuryResultat").bind(Service),
		prehandler: buildPreHandler(security, [{"jwt_bearer_token":[]}]).bind(Security)
		
	});

}

export const options = {
	ajv: {
		customOptions: {
			strict: false,
		},
	},
};
