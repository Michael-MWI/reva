enum LegalStatus {
  EI
  EURL
  SARL
  SAS
  SASU
  SA
  EIRL
  ASSOCIATION_LOI_1901
  ETABLISSEMENT_PUBLIC
  NC
}

enum SubscriptionRequestStatus {
  PENDING
  REJECTED
}

type SubscriptionRequest {
  id: ID!
  companySiret: String!
  companyLegalStatus: LegalStatus!
  companyName: String!
  companyAddress: String!
  companyZipCode: String!
  companyCity: String!
  accountFirstname: String!
  accountLastname: String!
  accountEmail: String!
  accountPhoneNumber: String!
  typology: SubscriptionOrganismTypology!
  subscriptionRequestOnDomaine: [SubscriptionRequestOnDomaine!]!
  subscriptionRequestOnConventionCollective: [SubscriptionRequestOnConventionCollective!]!
  departmentsWithOrganismMethods: [DepartmentWithOrganismMethods!]!
  companyWebsite: String
  qualiopiCertificateExpiresAt: Timestamp!
  status: SubscriptionRequestStatus!
  rejectionReason: String
  isCompanyNameUnique: Boolean!
}

type SubscriptionRequestOnDomaine {
  domaine: Domaine!
}

type SubscriptionRequestOnConventionCollective {
  ccn: ConventionCollective!
}

type DepartmentWithOrganismMethods {
  department: Department!
  isOnSite: Boolean!
  isRemote: Boolean!
}

type SubscriptionRequestSummary {
  id: ID!
  accountLastname: String!
  accountFirstname: String!
  accountEmail: String!
  companyName: String!
  companyAddress: String!
  createdAt: Timestamp!
}

input SubscriptionRequestOrderByInput {
  companyName: Sort
  accountLastname: Sort
  createdAt: Sort
}

type SubscriptionRequestsPaginated {
  rows: [SubscriptionRequestSummary!]!
  info: PaginationInfo!
}

type SubscriptionRequestV2 {
  id: ID!
  companySiret: String!
  companyLegalStatus: LegalStatus!
  companyName: String!
  managerFirstname: String!
  managerLastname: String!
  accountFirstname: String!
  accountLastname: String!
  accountEmail: String!
  accountPhoneNumber: String!
  companyWebsite: String!
  delegataire: Boolean!
  status: SubscriptionRequestStatus!
  rejectionReason: String
  attestationURSSAFFile: File!
  justificatifIdentiteDirigeantFile: File!
  lettreDeDelegationFile: File
  justificatifIdentiteDelegataireFile: File
  createdAt: Timestamp!
  etablissement: Etablissement
}
type SubscriptionRequestV2sPaginated {
  rows: [SubscriptionRequestV2!]!
  info: PaginationInfo!
}

type Query {
  subscription_getSubscriptionRequests(
    offset: Int
    limit: Int
    status: SubscriptionRequestStatus
    searchFilter: String
  ): SubscriptionRequestsPaginated!
  subscription_getSubscriptionRequest(
    subscriptionRequestId: ID!
  ): SubscriptionRequest
  subscription_getSubscriptionRequestV2s(
    offset: Int
    limit: Int
    status: SubscriptionRequestStatus
    searchFilter: String
  ): SubscriptionRequestV2sPaginated!
  subscription_getSubscriptionRequestV2(
    subscriptionRequestId: ID!
  ): SubscriptionRequestV2
}

enum SubscriptionOrganismTypology {
  generaliste
  expertFiliere
  expertBranche
}

input SubscriptionRequestInput {
  companySiret: String!
  companyLegalStatus: LegalStatus!
  companyName: String!
  companyAddress: String!
  companyZipCode: String!
  companyCity: String!
  accountFirstname: String!
  accountLastname: String!
  accountEmail: String!
  accountPhoneNumber: String!
  typology: SubscriptionOrganismTypology!
  domaineIds: [String!]
  ccnIds: [String!]
  onSiteDepartmentsIds: [ID!]!
  remoteDepartmentsIds: [ID!]!
  companyWebsite: String
  qualiopiCertificateExpiresAt: Timestamp!
}

input CreateSubscriptionRequestV2Input {
  companySiret: String!
  companyLegalStatus: LegalStatus!
  companyName: String!
  managerFirstname: String!
  managerLastname: String!
  accountFirstname: String!
  accountLastname: String!
  accountEmail: String!
  accountPhoneNumber: String!
  companyWebsite: String!
  delegataire: Boolean!
  attestationURSSAF: Upload!
  justificatifIdentiteDirigeant: Upload!
  lettreDeDelegation: Upload
  justificatifIdentiteDelegataire: Upload
}

type Mutation {
  subscription_createSubscriptionRequest(
    subscriptionRequest: SubscriptionRequestInput!
  ): SubscriptionRequest!
  subscription_validateSubscriptionRequest(subscriptionRequestId: ID!): String
  subscription_rejectSubscriptionRequest(
    subscriptionRequestId: ID!
    reason: String!
  ): String
  subscription_createSubscriptionRequestV2(
    createSubscriptionRequestV2Input: CreateSubscriptionRequestV2Input!
  ): String!
  subscription_validateSubscriptionRequestV2(subscriptionRequestId: ID!): String
  subscription_rejectSubscriptionRequestV2(
    subscriptionRequestId: ID!
    reason: String!
  ): String
}
