enum AccountGroup {
  admin
  organism
  certification_authority
}

type Account {
  id: UUID!
  email: String!
  firstname: String
  lastname: String
  certificationAuthority: CertificationAuthority
  organism: Organism
  disabledAt: Timestamp
  keycloakId: String
}

input AccountInput {
  email: String!
  username: String!
  firstname: String
  lastname: String
  group: AccountGroup!
  organismId: UUID
}

input UpdateAccountInput {
  email: String!
  firstname: String
  lastname: String
}

input GetImpersonateUrlInput {
  accountId: String
  candidateId: String
}

type AccountLogged {
  account: Account!
  tokens: AccountTokens!
}

type AccountTokens {
  accessToken: String!
  refreshToken: String!
  idToken: String!
}

type Mutation {
  account_createAccount(account: AccountInput): Account!
  account_updateAccount(
    accountId: ID!
    accountData: UpdateAccountInput!
  ): Account!
  account_disableAccount(accountId: ID!): Account!
  account_loginWithCredentials(
    email: String!
    password: String!
    clientApp: ClientApp!
  ): AccountLogged!
}

enum ClientApp {
  REVA_ADMIN
  REVA_VAE_COLLECTIVE
}

type AccountsPaginated {
  rows: [Account!]!
  info: PaginationInfo!
}

type Query {
  account_getAccountForConnectedUser: Account
  account_getImpersonateUrl(input: GetImpersonateUrlInput!): String
}
