type CohorteVaeCollective {
  id: ID!
  nom: String!
  codeInscription: String
  commanditaireVaeCollective: CommanditaireVaeCollective!
  certificationCohorteVaeCollectives: [CertificationCohorteVaeCollective!]!
  createdAt: Timestamp!
}
type CertificationCohorteVaeCollective {
  id: ID!
  certification: Certification!
  certificationCohorteVaeCollectiveOnOrganisms: [CertificationCohorteVaeCollectiveOnOrganism!]!
}

type CertificationCohorteVaeCollectiveOnOrganism {
  id: ID!
  organism: Organism!
}

type CommanditaireVaeCollective {
  id: ID!
  raisonSociale: String!
  cohorteVaeCollectives(offset: Int, limit: Int): CohorteVaeCollectivePage!
}

type CohorteVaeCollectivePage {
  rows: [CohorteVaeCollective!]!
  info: PaginationInfo!
}

type Candidacy {
  cohorteVaeCollective: CohorteVaeCollective
}

type Account {
  commanditaireVaeCollective: CommanditaireVaeCollective
}

type Query {
  cohorteVaeCollective(codeInscription: String!): CohorteVaeCollective
  cohortesVaeCollectivesForConnectedAap: [CohorteVaeCollective!]!
  cohortesVaeCollectivesForConnectedCertificationAuthorityOrLocalAccount: [CohorteVaeCollective!]!
  vaeCollective_getCommanditaireVaeCollective(
    commanditaireVaeCollectiveId: ID!
  ): CommanditaireVaeCollective!
  vaeCollective_getCohorteVaeCollectiveById(
    commanditaireVaeCollectiveId: ID!
    cohorteVaeCollectiveId: ID!
  ): CohorteVaeCollective!
}

type Mutation {
  vaeCollective_createCohorteVaeCollective(
    commanditaireVaeCollectiveId: ID!
    nomCohorteVaeCollective: String!
  ): CohorteVaeCollective!
  vaeCollective_updateNomCohorteVaeCollective(
    commanditaireVaeCollectiveId: ID!
    cohorteVaeCollectiveId: ID!
    nomCohorteVaeCollective: String!
  ): CohorteVaeCollective!
  vaeCollective_deleteCohorteVaeCollective(
    commanditaireVaeCollectiveId: ID!
    cohorteVaeCollectiveId: ID!
  ): Void!
}
