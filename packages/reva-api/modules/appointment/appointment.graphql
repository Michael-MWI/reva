type Appointment {
  id: ID!
  type: AppointmentType!
  title: String!
  description: String
  date: Date!
  time: Time
  duration: AppointmentDuration
  location: String
}

enum AppointmentType {
  RENDEZ_VOUS_PEDAGOGIQUE
  RENDEZ_VOUS_DE_SUIVI
}

enum AppointmentDuration {
  HALF_AN_HOUR
  ONE_HOUR
  TWO_HOURS
  THREE_HOURS
  FOUR_HOURS
}

type AppointmentPage {
  rows: [Appointment!]!
  info: PaginationInfo!
}

type Candidacy {
  appointments(
    type: AppointmentType
    onlyNext: Boolean
    offset: Int
    limit: Int
  ): AppointmentPage!
  firstAppointmentOccuredAt: Date
}

input CreateAppointmentInput {
  candidacyId: ID!
  type: AppointmentType!
  title: String!
  description: String
  date: Date!
  time: Time
  duration: AppointmentDuration
  location: String
}

input UpdateAppointmentInput {
  appointmentId: ID!
  candidacyId: ID!
  type: AppointmentType!
  title: String!
  description: String
  date: Date!
  time: Time
  duration: AppointmentDuration
  location: String
}

type Query {
  appointment_getAppointmentById(
    candidacyId: ID!
    appointmentId: ID!
  ): Appointment!
}

type Mutation {
  appointment_createAppointment(input: CreateAppointmentInput!): Appointment!
  appointment_updateAppointment(input: UpdateAppointmentInput!): Appointment!
}
