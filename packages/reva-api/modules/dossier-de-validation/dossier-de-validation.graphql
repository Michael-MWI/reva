type DossierDeValidation {
  id: ID!
  candidacy: Candidacy!
  dossierDeValidationFile: File!
  dossierDeValidationOtherFiles: [File!]!
  dossierDeValidationSentAt: Timestamp!
  decision: DossierDeValidationDecision!
  decisionComment: String
  decisionSentAt: Timestamp
  isActive: Boolean!
  createdAt: Timestamp!
  updatedAt: Timestamp
  history: [DossierDeValidation!]!
}

enum DossierDeValidationDecision {
  PENDING
  INCOMPLETE
}

enum DossierDeValidationCategoryFilter {
  ALL
  PENDING
  INCOMPLETE
}

type Candidacy {
  activeDossierDeValidation: DossierDeValidation
}

type DossierDeValidationPage {
  rows: [DossierDeValidation!]!
  info: PaginationInfo!
}

type DossierDeValidationCountByCategory {
  ALL: Int!
  PENDING: Int!
  INCOMPLETE: Int!
}

type Query {
  dossierDeValidation_getDossierDeValidationById(
    dossierDeValidationId: ID!
  ): DossierDeValidation
  dossierDeValidation_getDossiersDeValidation(
    offset: Int
    limit: Int
    categoryFilter: DossierDeValidationCategoryFilter
    searchFilter: String
    certificationAuthorityId: ID
  ): DossierDeValidationPage!
  dossierDeValidation_dossierDeValidationCountByCategory(
    searchFilter: String
    certificationAuthorityId: ID
  ): DossierDeValidationCountByCategory!
}

type Mutation {
  dossierDeValidation_signalProblem(
    dossierDeValidationId: ID!
    decisionComment: String!
  ): DossierDeValidation!
}
