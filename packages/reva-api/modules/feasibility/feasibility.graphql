enum FeasibilityDecision {
  DRAFT
  PENDING
  REJECTED
  ADMISSIBLE
  COMPLETE
  INCOMPLETE
}

enum FeasibilityFormat {
  UPLOADED_PDF
  DEMATERIALIZED
}

type Feasibility {
  id: ID!
  certificationAuthority: CertificationAuthority
  feasibilityFileSentAt: Timestamp
  candidacy: Candidacy!
  decision: FeasibilityDecision!
  decisionComment: String
  decisionSentAt: Timestamp
  decisionFile: File
  history: [FeasibilityHistory!]!
  dematerializedFeasibilityFile: DematerializedFeasibilityFile
  feasibilityUploadedPdf: FeasibilityUploadedPdf
  feasibilityFormat: FeasibilityFormat!
}

type FeasibilityHistory {
  id: ID!
  decision: FeasibilityDecision!
  decisionComment: String
  decisionSentAt: Timestamp
}

type File {
  url: String!
  name: String!
  mimeType: String!
  previewUrl: String
  createdAt: Timestamp
}

type Candidacy {
  certificationAuthorities: [CertificationAuthority!]!
  feasibility: Feasibility
}

type FeasibilityCountByCategory {
  ALL: Int!
  PENDING: Int!
  REJECTED: Int!
  ADMISSIBLE: Int!
  COMPLETE: Int!
  INCOMPLETE: Int!
  ARCHIVED: Int!
  DROPPED_OUT: Int!
  CADUQUE: Int!
  CONTESTATION: Int!
}

type FeasibilityPage {
  rows: [Feasibility!]!
  info: PaginationInfo!
}

enum FeasibilityCategoryFilter {
  ALL
  PENDING
  REJECTED
  ADMISSIBLE
  COMPLETE
  INCOMPLETE
  ARCHIVED
  DROPPED_OUT
  CADUQUE
  CONTESTATION
}

type Query {
  feasibilityCountByCategory(
    searchFilter: String
    certificationAuthorityId: ID
  ): FeasibilityCountByCategory!
  feasibilities(
    offset: Int
    limit: Int
    categoryFilter: FeasibilityCategoryFilter
    searchFilter: String
    certificationAuthorityId: ID
  ): FeasibilityPage!
  feasibility(feasibilityId: ID!): Feasibility
  feasibility_getActiveFeasibilityByCandidacyId(candidacyId: ID!): Feasibility
}
