type DematerializedFeasibilityFile {
  id: ID!
  candidacyId: ID!
  isComplete: Boolean!
  firstForeignLanguage: String
  secondForeignLanguage: String
  option: String
  blocsDeCompetences(blocDeCompetencesId: ID): [CertificationCompetenceBloc!]!
  certificationPartComplete: Boolean!
  attachmentsPartComplete: Boolean!
  competenceBlocsPartCompletion: CompetenceBlocsPartCompletion!
  certificationCompetenceDetails: [CertificationCompetenceDetails!]!
  prerequisitesPartComplete: Boolean!
  prerequisites: [Prerequisite]!
  decision: DFFileDecision!
  decisionComment: String
  decisionSentAt: Timestamp
  attachments: [DFFAttachment]!
}

type Prerequisite {
  id: ID!
  label: String!
  state: PrerequisiteState!
}
input PrerequisiteInput {
  id: ID
  label: String!
  state: PrerequisiteState!
}

enum CompetenceBlocsPartCompletion {
  TO_COMPLETE
  COMPLETED
  IN_PROGRESS
}

enum PrerequisiteState {
  ACQUIRED
  IN_PROGRESS
  RECOMMENDED
}

enum CandidacyFeasibilityFormat {
  UPLOADED_PDF
  DEMATERIALIZED
}

type CertificationCompetenceDetails {
  certificationCompetence: CertificationCompetence!
  text: String!
}

type Candidacy {
  dematerializedFeasibilityFile: DematerializedFeasibilityFile
  feasibilityFormat: CandidacyFeasibilityFormat
}

type DFFAttachment {
  id: ID!
  file: File!
  type: DFFAttachmentType!
  createdAt: Timestamp!
}

enum CertificationCompletion {
  COMPLETE
  PARTIAL
}
enum DFFAttachmentType {
  ID_CARD
  EQUIVALENCE_OR_EXEMPTION_PROOF
  TRAINING_CERTIFICATE
  ADDITIONAL
}

input DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput {
  candidacyId: String!
  firstForeignLanguage: String
  secondForeignLanguage: String
  option: String
  blocDeCompetencesIds: [String!]!
  completion: CertificationCompletion!
}

input DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput {
  candidacyId: ID!
  dematerializedFeasibilityFileId: ID!
  competenceBlocId: ID!
  competenceIdAndTexts: [CompetenceIdAndText!]!
}

input DematerializedFeasibilityFileCreateOrUpdatePrerequisitesInput {
  candidacyId: ID!
  prerequisites: [PrerequisiteInput]!
}

input DematerializedFeasibilityFileCreateOrUpdateDecisionInput {
  candidacyId: ID!
  decision: DFFileDecision!
  decisionComment: String!
}

enum DFFileDecision {
  ACCEPTED
  REJECTED
}

input CompetenceIdAndText {
  competenceId: ID!
  text: String!
}

input DematerializedFeasibilityFileCreateOrUpdateAttachmentsInput {
  candidacyId: ID!
  idCard: Upload!
  equivalenceOrExemptionProof: Upload
  trainingCertificate: Upload
  additionalFiles: [Upload]
}

type Query {
  dematerialized_feasibility_file_getByCandidacyId(
    candidacyId: ID!
  ): DematerializedFeasibilityFile
}

type Mutation {
  dematerialized_feasibility_file_createOrUpdateCertificationInfo(
    input: DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrupdateCertificationCompetenceDetails(
    input: DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdatePrerequisites(
    input: DematerializedFeasibilityFileCreateOrUpdatePrerequisitesInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdateDecision(
    input: DematerializedFeasibilityFileCreateOrUpdateDecisionInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdateAttachments(
    input: DematerializedFeasibilityFileCreateOrUpdateAttachmentsInput!
  ): String!
}
